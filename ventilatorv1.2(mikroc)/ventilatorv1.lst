;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 02/04/2020 16:47:11
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2BAC      	GOTO       940
_Interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00ED      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00EC      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A7      	MOVWF      39
0x000D	0x0871      	MOVF       R1, 0
0x000E	0x00A6      	MOVWF      38
0x000F	0x0872      	MOVF       R2, 0
0x0010	0x00A5      	MOVWF      37
0x0011	0x0873      	MOVF       R3, 0
0x0012	0x00A4      	MOVWF      36
0x0013	0x0874      	MOVF       R4, 0
0x0014	0x00A3      	MOVWF      35
0x0015	0x0875      	MOVF       R5, 0
0x0016	0x00A2      	MOVWF      34
0x0017	0x087C      	MOVF       R12, 0
0x0018	0x00A1      	MOVWF      33
0x0019	0x087D      	MOVF       R13, 0
0x001A	0x00A0      	MOVWF      32
0x001B	0x0804      	MOVF       FSR, 0
0x001C	0x00A8      	MOVWF      40
;ventilatorv1_2.c,321 :: 		void Interrupt(){           //interrupt function runs evry 1ms
;ventilatorv1_2.c,322 :: 		if (TMR0IF_bit){
0x001D	0x1D0B      	BTFSS      TMR0IF_bit, BitPos(TMR0IF_bit+0)
0x001E	0x2866      	GOTO       L_Interrupt51
;ventilatorv1_2.c,323 :: 		TMR0IF_bit         = 0;
0x001F	0x110B      	BCF        TMR0IF_bit, BitPos(TMR0IF_bit+0)
;ventilatorv1_2.c,324 :: 		TMR0                 = 100;
0x0020	0x3064      	MOVLW      100
0x0021	0x0081      	MOVWF      TMR0
;ventilatorv1_2.c,325 :: 		if(count>=50){        //here switches and analog reada will be taken every 50 ms
0x0022	0x3000      	MOVLW      0
0x0023	0x023C      	SUBWF      _count+3, 0
0x0024	0x1D03      	BTFSS      STATUS, 2
0x0025	0x2830      	GOTO       L__Interrupt121
0x0026	0x3000      	MOVLW      0
0x0027	0x023B      	SUBWF      _count+2, 0
0x0028	0x1D03      	BTFSS      STATUS, 2
0x0029	0x2830      	GOTO       L__Interrupt121
0x002A	0x3000      	MOVLW      0
0x002B	0x023A      	SUBWF      _count+1, 0
0x002C	0x1D03      	BTFSS      STATUS, 2
0x002D	0x2830      	GOTO       L__Interrupt121
0x002E	0x3032      	MOVLW      50
0x002F	0x0239      	SUBWF      _count, 0
L__Interrupt121:
0x0030	0x1C03      	BTFSS      STATUS, 0
0x0031	0x2838      	GOTO       L_Interrupt52
;ventilatorv1_2.c,327 :: 		switches() ;       //reading switches
0x0032	0x2138      	CALL       _switches
;ventilatorv1_2.c,328 :: 		read_sensor_data(); //reading sensor data
0x0033	0x2342      	CALL       _read_sensor_data
;ventilatorv1_2.c,331 :: 		count=0;
0x0034	0x01B9      	CLRF       _count
0x0035	0x01BA      	CLRF       _count+1
0x0036	0x01BB      	CLRF       _count+2
0x0037	0x01BC      	CLRF       _count+3
;ventilatorv1_2.c,333 :: 		}
L_Interrupt52:
;ventilatorv1_2.c,335 :: 		millis_count++;
0x0038	0x0854      	MOVF       _millis_count, 0
0x0039	0x00F0      	MOVWF      R0
0x003A	0x0855      	MOVF       _millis_count+1, 0
0x003B	0x00F1      	MOVWF      R0+1
0x003C	0x0856      	MOVF       _millis_count+2, 0
0x003D	0x00F2      	MOVWF      R0+2
0x003E	0x0857      	MOVF       _millis_count+3, 0
0x003F	0x00F3      	MOVWF      R0+3
0x0040	0x0AF0      	INCF       R0, 1
0x0041	0x1903      	BTFSC      STATUS, 2
0x0042	0x0AF1      	INCF       R0+1, 1
0x0043	0x1903      	BTFSC      STATUS, 2
0x0044	0x0AF2      	INCF       R0+2, 1
0x0045	0x1903      	BTFSC      STATUS, 2
0x0046	0x0AF3      	INCF       R0+3, 1
0x0047	0x0870      	MOVF       R0, 0
0x0048	0x00D4      	MOVWF      _millis_count
0x0049	0x0871      	MOVF       R0+1, 0
0x004A	0x00D5      	MOVWF      _millis_count+1
0x004B	0x0872      	MOVF       R0+2, 0
0x004C	0x00D6      	MOVWF      _millis_count+2
0x004D	0x0873      	MOVF       R0+3, 0
0x004E	0x00D7      	MOVWF      _millis_count+3
;ventilatorv1_2.c,336 :: 		count++;
0x004F	0x0839      	MOVF       _count, 0
0x0050	0x00F0      	MOVWF      R0
0x0051	0x083A      	MOVF       _count+1, 0
0x0052	0x00F1      	MOVWF      R0+1
0x0053	0x083B      	MOVF       _count+2, 0
0x0054	0x00F2      	MOVWF      R0+2
0x0055	0x083C      	MOVF       _count+3, 0
0x0056	0x00F3      	MOVWF      R0+3
0x0057	0x0AF0      	INCF       R0, 1
0x0058	0x1903      	BTFSC      STATUS, 2
0x0059	0x0AF1      	INCF       R0+1, 1
0x005A	0x1903      	BTFSC      STATUS, 2
0x005B	0x0AF2      	INCF       R0+2, 1
0x005C	0x1903      	BTFSC      STATUS, 2
0x005D	0x0AF3      	INCF       R0+3, 1
0x005E	0x0870      	MOVF       R0, 0
0x005F	0x00B9      	MOVWF      _count
0x0060	0x0871      	MOVF       R0+1, 0
0x0061	0x00BA      	MOVWF      _count+1
0x0062	0x0872      	MOVF       R0+2, 0
0x0063	0x00BB      	MOVWF      _count+2
0x0064	0x0873      	MOVF       R0+3, 0
0x0065	0x00BC      	MOVWF      _count+3
;ventilatorv1_2.c,337 :: 		}
L_Interrupt51:
;ventilatorv1_2.c,339 :: 		}
L_end_Interrupt:
L__Interrupt120:
0x0066	0x0827      	MOVF       39, 0
0x0067	0x00F0      	MOVWF      R0
0x0068	0x0826      	MOVF       38, 0
0x0069	0x00F1      	MOVWF      R1
0x006A	0x0825      	MOVF       37, 0
0x006B	0x00F2      	MOVWF      R2
0x006C	0x0824      	MOVF       36, 0
0x006D	0x00F3      	MOVWF      R3
0x006E	0x0823      	MOVF       35, 0
0x006F	0x00F4      	MOVWF      R4
0x0070	0x0822      	MOVF       34, 0
0x0071	0x00F5      	MOVWF      R5
0x0072	0x0821      	MOVF       33, 0
0x0073	0x00FC      	MOVWF      R12
0x0074	0x0820      	MOVF       32, 0
0x0075	0x00FD      	MOVWF      R13
0x0076	0x0828      	MOVF       40, 0
0x0077	0x0084      	MOVWF      FSR
0x0078	0x086C      	MOVF       ___savePCLATH, 0
0x0079	0x008A      	MOVWF      PCLATH
0x007A	0x0E6D      	SWAPF      ___saveSTATUS, 0
0x007B	0x0083      	MOVWF      STATUS
0x007C	0x0EFF      	SWAPF      R15, 1
0x007D	0x0E7F      	SWAPF      R15, 0
0x007E	0x0009      	RETFIE
; end of _Interrupt
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x007F	0x3024      	MOVLW      36
0x0080	0x1283      	BCF        STATUS, 5
0x0081	0x1303      	BCF        STATUS, 6
0x0082	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x0083	0x0BFD      	DECFSZ     R13, 1
0x0084	0x2883      	GOTO       L_Delay_22us1
0x0085	0x0000      	NOP
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0086	0x0008      	RETURN
; end of _Delay_22us
_Delay_500us:
;__Lib_Delays.c,27 :: 		void Delay_500us() {
;__Lib_Delays.c,28 :: 		Delay_us(498);
0x0087	0x3004      	MOVLW      4
0x0088	0x1283      	BCF        STATUS, 5
0x0089	0x1303      	BCF        STATUS, 6
0x008A	0x00FC      	MOVWF      R12
0x008B	0x303A      	MOVLW      58
0x008C	0x00FD      	MOVWF      R13
L_Delay_500us4:
0x008D	0x0BFD      	DECFSZ     R13, 1
0x008E	0x288D      	GOTO       L_Delay_500us4
0x008F	0x0BFC      	DECFSZ     R12, 1
0x0090	0x288D      	GOTO       L_Delay_500us4
0x0091	0x0000      	NOP
;__Lib_Delays.c,29 :: 		}
L_end_Delay_500us:
0x0092	0x0008      	RETURN
; end of _Delay_500us
_ADC_Read:
;__Lib_ADC_A_C.c,68 :: 		
;__Lib_ADC_A_C.c,70 :: 		
0x0093	0x1283      	BCF        STATUS, 5
0x0094	0x1303      	BCF        STATUS, 6
0x0095	0x019F      	CLRF       ADCON0
;__Lib_ADC_A_C.c,71 :: 		
0x0096	0x30C0      	MOVLW      192
0x0097	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_A_C.c,72 :: 		
0x0098	0x0953      	COMF       _vref_mask, 0
0x0099	0x00F0      	MOVWF      R0
0x009A	0x0870      	MOVF       R0, 0
0x009B	0x1683      	BSF        STATUS, 5
0x009C	0x059F      	ANDWF      ADCON1, 1
;__Lib_ADC_A_C.c,73 :: 		
0x009D	0x171F      	BSF        ADCON1, 6
;__Lib_ADC_A_C.c,74 :: 		
0x009E	0x179F      	BSF        ADCON1, 7
;__Lib_ADC_A_C.c,75 :: 		
0x009F	0x0824      	MOVF       FARG_ADC_Read_channel, 0
0x00A0	0x00F0      	MOVWF      R0
0x00A1	0x0DF0      	RLF        R0, 1
0x00A2	0x1070      	BCF        R0, 0
0x00A3	0x0DF0      	RLF        R0, 1
0x00A4	0x1070      	BCF        R0, 0
0x00A5	0x0DF0      	RLF        R0, 1
0x00A6	0x1070      	BCF        R0, 0
0x00A7	0x0870      	MOVF       R0, 0
0x00A8	0x1283      	BCF        STATUS, 5
0x00A9	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_A_C.c,78 :: 		
0x00AA	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_A_C.c,81 :: 		
0x00AB	0x207F      	CALL       _Delay_22us
;__Lib_ADC_A_C.c,84 :: 		
0x00AC	0x151F      	BSF        ADCON0, 2
;__Lib_ADC_A_C.c,87 :: 		
L_ADC_Read2:
0x00AD	0x1D1F      	BTFSS      ADCON0, 2
0x00AE	0x28B1      	GOTO       L_ADC_Read3
;__Lib_ADC_A_C.c,88 :: 		
0x00AF	0x0000      	NOP
0x00B0	0x28AD      	GOTO       L_ADC_Read2
L_ADC_Read3:
;__Lib_ADC_A_C.c,91 :: 		
0x00B1	0x101F      	BCF        ADCON0, 0
;__Lib_ADC_A_C.c,94 :: 		
0x00B2	0x081E      	MOVF       ADRESH, 0
0x00B3	0x00F1      	MOVWF      R0+1
0x00B4	0x01F0      	CLRF       R0
0x00B5	0x1683      	BSF        STATUS, 5
0x00B6	0x081E      	MOVF       ADRESL, 0
0x00B7	0x04F0      	IORWF      R0, 1
0x00B8	0x3000      	MOVLW      0
0x00B9	0x04F1      	IORWF      R0+1, 1
;__Lib_ADC_A_C.c,95 :: 		
L_end_ADC_Read:
0x00BA	0x0008      	RETURN
; end of _ADC_Read
_latch595:
;ventilatorv1_2.c,89 :: 		void latch595()              //latch pin controll
;ventilatorv1_2.c,91 :: 		SHIFT_LATCH = 1;
0x00BB	0x1283      	BCF        STATUS, 5
0x00BC	0x1303      	BCF        STATUS, 6
0x00BD	0x1486      	BSF        PORTB, 1
;ventilatorv1_2.c,92 :: 		Delay_us(1);
0x00BE	0x0000      	NOP
0x00BF	0x0000      	NOP
0x00C0	0x0000      	NOP
0x00C1	0x0000      	NOP
0x00C2	0x0000      	NOP
;ventilatorv1_2.c,93 :: 		SHIFT_LATCH = 0;
0x00C3	0x1086      	BCF        PORTB, 1
;ventilatorv1_2.c,94 :: 		}
L_end_latch595:
0x00C4	0x0008      	RETURN
; end of _latch595
_shiftdata595:
;ventilatorv1_2.c,74 :: 		void shiftdata595(int _shiftdata[])  //shift register
;ventilatorv1_2.c,78 :: 		i=8;
0x00C5	0x3008      	MOVLW      8
0x00C6	0x1283      	BCF        STATUS, 5
0x00C7	0x1303      	BCF        STATUS, 6
0x00C8	0x00F4      	MOVWF      R4
0x00C9	0x3000      	MOVLW      0
0x00CA	0x00F5      	MOVWF      R4+1
;ventilatorv1_2.c,79 :: 		while (i>0)                  //loop to send 8bit data
L_shiftdata5950:
0x00CB	0x0875      	MOVF       R4+1, 0
0x00CC	0x3C00      	SUBLW      0
0x00CD	0x1D03      	BTFSS      STATUS, 2
0x00CE	0x28D1      	GOTO       L__shiftdata59592
0x00CF	0x0874      	MOVF       R4, 0
0x00D0	0x3C00      	SUBLW      0
L__shiftdata59592:
0x00D1	0x1803      	BTFSC      STATUS, 0
0x00D2	0x28F6      	GOTO       L_shiftdata5951
;ventilatorv1_2.c,81 :: 		SHIFT_DATA=_shiftdata[i-1]; //  send array value
0x00D3	0x3001      	MOVLW      1
0x00D4	0x0274      	SUBWF      R4, 0
0x00D5	0x00F2      	MOVWF      R2
0x00D6	0x3000      	MOVLW      0
0x00D7	0x1C03      	BTFSS      STATUS, 0
0x00D8	0x3E01      	ADDLW      1
0x00D9	0x0275      	SUBWF      R4+1, 0
0x00DA	0x00F3      	MOVWF      R2+1
0x00DB	0x0872      	MOVF       R2, 0
0x00DC	0x00F0      	MOVWF      R0
0x00DD	0x0DF0      	RLF        R0, 1
0x00DE	0x1070      	BCF        R0, 0
0x00DF	0x0870      	MOVF       R0, 0
0x00E0	0x1683      	BSF        STATUS, 5
0x00E1	0x0724      	ADDWF      FARG_shiftdata595__shiftdata, 0
0x00E2	0x0084      	MOVWF      FSR
0x00E3	0x1800      	BTFSC      INDF, 0
0x00E4	0x28E8      	GOTO       L__shiftdata59593
0x00E5	0x1283      	BCF        STATUS, 5
0x00E6	0x1006      	BCF        PORTB, 0
0x00E7	0x28EA      	GOTO       L__shiftdata59594
L__shiftdata59593:
0x00E8	0x1283      	BCF        STATUS, 5
0x00E9	0x1406      	BSF        PORTB, 0
L__shiftdata59594:
;ventilatorv1_2.c,82 :: 		SHIFT_CLOCK = 1;
0x00EA	0x1506      	BSF        PORTB, 2
;ventilatorv1_2.c,83 :: 		Delay_us(1);
0x00EB	0x0000      	NOP
0x00EC	0x0000      	NOP
0x00ED	0x0000      	NOP
0x00EE	0x0000      	NOP
0x00EF	0x0000      	NOP
;ventilatorv1_2.c,84 :: 		SHIFT_CLOCK = 0;
0x00F0	0x1106      	BCF        PORTB, 2
;ventilatorv1_2.c,85 :: 		i--;
0x00F1	0x3001      	MOVLW      1
0x00F2	0x02F4      	SUBWF      R4, 1
0x00F3	0x1C03      	BTFSS      STATUS, 0
0x00F4	0x03F5      	DECF       R4+1, 1
;ventilatorv1_2.c,86 :: 		}
0x00F5	0x28CB      	GOTO       L_shiftdata5950
L_shiftdata5951:
;ventilatorv1_2.c,87 :: 		}
L_end_shiftdata595:
0x00F6	0x0008      	RETURN
; end of _shiftdata595
_Button:
;__Lib_Button.c,6 :: 		
;__Lib_Button.c,8 :: 		
0x00F7	0x1683      	BSF        STATUS, 5
0x00F8	0x1303      	BCF        STATUS, 6
0x00F9	0x01A9      	CLRF       Button_rslt_L0
;__Lib_Button.c,11 :: 		
0x00FA	0x0825      	MOVF       FARG_Button_pin, 0
0x00FB	0x00F1      	MOVWF      R1
0x00FC	0x3001      	MOVLW      1
0x00FD	0x00F0      	MOVWF      R0
0x00FE	0x0871      	MOVF       R1, 0
L__Button5:
0x00FF	0x1903      	BTFSC      STATUS, 2
0x0100	0x2905      	GOTO       L__Button6
0x0101	0x0DF0      	RLF        R0, 1
0x0102	0x1070      	BCF        R0, 0
0x0103	0x3EFF      	ADDLW      255
0x0104	0x28FF      	GOTO       L__Button5
L__Button6:
0x0105	0x0870      	MOVF       R0, 0
0x0106	0x00A8      	MOVWF      Button_pMask_L0
;__Lib_Button.c,13 :: 		
0x0107	0x0824      	MOVF       FARG_Button_port, 0
0x0108	0x0084      	MOVWF      FSR
0x0109	0x0870      	MOVF       R0, 0
0x010A	0x0500      	ANDWF      INDF, 0
0x010B	0x00F1      	MOVWF      R1
0x010C	0x0871      	MOVF       R1, 0
0x010D	0x3001      	MOVLW      1
0x010E	0x1D03      	BTFSS      STATUS, 2
0x010F	0x3000      	MOVLW      0
0x0110	0x00F0      	MOVWF      R0
0x0111	0x0827      	MOVF       FARG_Button_active_state, 0
0x0112	0x06F0      	XORWF      R0, 1
0x0113	0x1903      	BTFSC      STATUS, 2
0x0114	0x292E      	GOTO       L_Button0
;__Lib_Button.c,15 :: 		
L_Button1:
0x0115	0x0826      	MOVF       FARG_Button_time_ms, 0
0x0116	0x3C00      	SUBLW      0
0x0117	0x1803      	BTFSC      STATUS, 0
0x0118	0x291E      	GOTO       L_Button2
;__Lib_Button.c,16 :: 		
0x0119	0x2087      	CALL       _Delay_500us
;__Lib_Button.c,17 :: 		
0x011A	0x2087      	CALL       _Delay_500us
;__Lib_Button.c,18 :: 		
0x011B	0x1683      	BSF        STATUS, 5
0x011C	0x03A6      	DECF       FARG_Button_time_ms, 1
;__Lib_Button.c,19 :: 		
0x011D	0x2915      	GOTO       L_Button1
L_Button2:
;__Lib_Button.c,21 :: 		
0x011E	0x0824      	MOVF       FARG_Button_port, 0
0x011F	0x0084      	MOVWF      FSR
0x0120	0x0828      	MOVF       Button_pMask_L0, 0
0x0121	0x0500      	ANDWF      INDF, 0
0x0122	0x00F1      	MOVWF      R1
0x0123	0x0871      	MOVF       R1, 0
0x0124	0x3001      	MOVLW      1
0x0125	0x1D03      	BTFSS      STATUS, 2
0x0126	0x3000      	MOVLW      0
0x0127	0x00F0      	MOVWF      R0
0x0128	0x0827      	MOVF       FARG_Button_active_state, 0
0x0129	0x06F0      	XORWF      R0, 1
0x012A	0x1903      	BTFSC      STATUS, 2
0x012B	0x292E      	GOTO       L_Button3
;__Lib_Button.c,22 :: 		
0x012C	0x30FF      	MOVLW      255
0x012D	0x00A9      	MOVWF      Button_rslt_L0
L_Button3:
;__Lib_Button.c,23 :: 		
L_Button0:
;__Lib_Button.c,25 :: 		
0x012E	0x0829      	MOVF       Button_rslt_L0, 0
0x012F	0x00F0      	MOVWF      R0
;__Lib_Button.c,26 :: 		
L_end_Button:
0x0130	0x0008      	RETURN
; end of _Button
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0131	0x1283      	BCF        STATUS, 5
0x0132	0x1303      	BCF        STATUS, 6
0x0133	0x086F      	MOVF       ___DoICPAddr+1, 0
0x0134	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0135	0x086E      	MOVF       ___DoICPAddr, 0
0x0136	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0137	0x0008      	RETURN
; end of _____DoICP
_switches:
;ventilatorv1_2.c,118 :: 		void switches(){
;ventilatorv1_2.c,120 :: 		if (Button(&PORTB, 6, 1, 0)) {               // Detect logical zero
0x0138	0x3006      	MOVLW      PORTB
0x0139	0x1683      	BSF        STATUS, 5
0x013A	0x1303      	BCF        STATUS, 6
0x013B	0x00A4      	MOVWF      FARG_Button_port
0x013C	0x3006      	MOVLW      6
0x013D	0x00A5      	MOVWF      FARG_Button_pin
0x013E	0x3001      	MOVLW      1
0x013F	0x00A6      	MOVWF      FARG_Button_time_ms
0x0140	0x01A7      	CLRF       FARG_Button_active_state
0x0141	0x20F7      	CALL       _Button
0x0142	0x0870      	MOVF       R0, 0
0x0143	0x1903      	BTFSC      STATUS, 2
0x0144	0x2947      	GOTO       L_switches4
;ventilatorv1_2.c,121 :: 		oldbpmup = 1;                              // Update flag
0x0145	0x1283      	BCF        STATUS, 5
0x0146	0x1468      	BSF        _oldbpmup, BitPos(_oldbpmup+0)
;ventilatorv1_2.c,122 :: 		}
L_switches4:
0x0147	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,123 :: 		if (oldbpmup && Button(&PORTB, 6, 1, 1)) {   // Detect zero-to-one transition
0x0148	0x1C68      	BTFSS      _oldbpmup, BitPos(_oldbpmup+0)
0x0149	0x2974      	GOTO       L_switches7
0x014A	0x3006      	MOVLW      PORTB
0x014B	0x1683      	BSF        STATUS, 5
0x014C	0x00A4      	MOVWF      FARG_Button_port
0x014D	0x3006      	MOVLW      6
0x014E	0x00A5      	MOVWF      FARG_Button_pin
0x014F	0x3001      	MOVLW      1
0x0150	0x00A6      	MOVWF      FARG_Button_time_ms
0x0151	0x3001      	MOVLW      1
0x0152	0x00A7      	MOVWF      FARG_Button_active_state
0x0153	0x20F7      	CALL       _Button
0x0154	0x0870      	MOVF       R0, 0
0x0155	0x1903      	BTFSC      STATUS, 2
0x0156	0x2974      	GOTO       L_switches7
L__switches85:
;ventilatorv1_2.c,124 :: 		oldbpmup = 0;
0x0157	0x1283      	BCF        STATUS, 5
0x0158	0x1068      	BCF        _oldbpmup, BitPos(_oldbpmup+0)
;ventilatorv1_2.c,126 :: 		bpmv++;                                //increment bpm level
0x0159	0x0AC5      	INCF       _bpmv, 1
0x015A	0x1903      	BTFSC      STATUS, 2
0x015B	0x0AC6      	INCF       _bpmv+1, 1
;ventilatorv1_2.c,128 :: 		if(bpmv>16){                     //limit bpm value
0x015C	0x0846      	MOVF       _bpmv+1, 0
0x015D	0x3C00      	SUBLW      0
0x015E	0x1D03      	BTFSS      STATUS, 2
0x015F	0x2962      	GOTO       L__switches100
0x0160	0x0845      	MOVF       _bpmv, 0
0x0161	0x3C10      	SUBLW      16
L__switches100:
0x0162	0x1803      	BTFSC      STATUS, 0
0x0163	0x2968      	GOTO       L_switches8
;ventilatorv1_2.c,129 :: 		bpmv=16;
0x0164	0x3010      	MOVLW      16
0x0165	0x00C5      	MOVWF      _bpmv
0x0166	0x3000      	MOVLW      0
0x0167	0x00C6      	MOVWF      _bpmv+1
;ventilatorv1_2.c,130 :: 		}
L_switches8:
;ventilatorv1_2.c,131 :: 		if(bpmv<12){
0x0168	0x3000      	MOVLW      0
0x0169	0x0246      	SUBWF      _bpmv+1, 0
0x016A	0x1D03      	BTFSS      STATUS, 2
0x016B	0x296E      	GOTO       L__switches101
0x016C	0x300C      	MOVLW      12
0x016D	0x0245      	SUBWF      _bpmv, 0
L__switches101:
0x016E	0x1803      	BTFSC      STATUS, 0
0x016F	0x2974      	GOTO       L_switches9
;ventilatorv1_2.c,132 :: 		bpmv=12;
0x0170	0x300C      	MOVLW      12
0x0171	0x00C5      	MOVWF      _bpmv
0x0172	0x3000      	MOVLW      0
0x0173	0x00C6      	MOVWF      _bpmv+1
;ventilatorv1_2.c,133 :: 		}
L_switches9:
;ventilatorv1_2.c,136 :: 		}
L_switches7:
;ventilatorv1_2.c,138 :: 		if (Button(&PORTB, 7, 1, 0)) {               // Detect logical zero
0x0174	0x3006      	MOVLW      PORTB
0x0175	0x1683      	BSF        STATUS, 5
0x0176	0x00A4      	MOVWF      FARG_Button_port
0x0177	0x3007      	MOVLW      7
0x0178	0x00A5      	MOVWF      FARG_Button_pin
0x0179	0x3001      	MOVLW      1
0x017A	0x00A6      	MOVWF      FARG_Button_time_ms
0x017B	0x01A7      	CLRF       FARG_Button_active_state
0x017C	0x20F7      	CALL       _Button
0x017D	0x0870      	MOVF       R0, 0
0x017E	0x1903      	BTFSC      STATUS, 2
0x017F	0x2982      	GOTO       L_switches10
;ventilatorv1_2.c,139 :: 		oldbpmdown = 1;                              // Update flag
0x0180	0x1283      	BCF        STATUS, 5
0x0181	0x14E8      	BSF        _oldbpmdown, BitPos(_oldbpmdown+0)
;ventilatorv1_2.c,140 :: 		}
L_switches10:
0x0182	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,141 :: 		if (oldbpmdown && Button(&PORTB, 7, 1, 1)) {   // Detect zero-to-one transition
0x0183	0x1CE8      	BTFSS      _oldbpmdown, BitPos(_oldbpmdown+0)
0x0184	0x29B0      	GOTO       L_switches13
0x0185	0x3006      	MOVLW      PORTB
0x0186	0x1683      	BSF        STATUS, 5
0x0187	0x00A4      	MOVWF      FARG_Button_port
0x0188	0x3007      	MOVLW      7
0x0189	0x00A5      	MOVWF      FARG_Button_pin
0x018A	0x3001      	MOVLW      1
0x018B	0x00A6      	MOVWF      FARG_Button_time_ms
0x018C	0x3001      	MOVLW      1
0x018D	0x00A7      	MOVWF      FARG_Button_active_state
0x018E	0x20F7      	CALL       _Button
0x018F	0x0870      	MOVF       R0, 0
0x0190	0x1903      	BTFSC      STATUS, 2
0x0191	0x29B0      	GOTO       L_switches13
L__switches84:
;ventilatorv1_2.c,142 :: 		oldbpmdown = 0;                           // Update flag
0x0192	0x1283      	BCF        STATUS, 5
0x0193	0x10E8      	BCF        _oldbpmdown, BitPos(_oldbpmdown+0)
;ventilatorv1_2.c,144 :: 		bpmv--;                                      //decrement bpm value
0x0194	0x3001      	MOVLW      1
0x0195	0x02C5      	SUBWF      _bpmv, 1
0x0196	0x1C03      	BTFSS      STATUS, 0
0x0197	0x03C6      	DECF       _bpmv+1, 1
;ventilatorv1_2.c,145 :: 		if(bpmv>16){                                 //limit bpm value
0x0198	0x0846      	MOVF       _bpmv+1, 0
0x0199	0x3C00      	SUBLW      0
0x019A	0x1D03      	BTFSS      STATUS, 2
0x019B	0x299E      	GOTO       L__switches102
0x019C	0x0845      	MOVF       _bpmv, 0
0x019D	0x3C10      	SUBLW      16
L__switches102:
0x019E	0x1803      	BTFSC      STATUS, 0
0x019F	0x29A4      	GOTO       L_switches14
;ventilatorv1_2.c,146 :: 		bpmv=16;
0x01A0	0x3010      	MOVLW      16
0x01A1	0x00C5      	MOVWF      _bpmv
0x01A2	0x3000      	MOVLW      0
0x01A3	0x00C6      	MOVWF      _bpmv+1
;ventilatorv1_2.c,147 :: 		}
L_switches14:
;ventilatorv1_2.c,148 :: 		if(bpmv<12){
0x01A4	0x3000      	MOVLW      0
0x01A5	0x0246      	SUBWF      _bpmv+1, 0
0x01A6	0x1D03      	BTFSS      STATUS, 2
0x01A7	0x29AA      	GOTO       L__switches103
0x01A8	0x300C      	MOVLW      12
0x01A9	0x0245      	SUBWF      _bpmv, 0
L__switches103:
0x01AA	0x1803      	BTFSC      STATUS, 0
0x01AB	0x29B0      	GOTO       L_switches15
;ventilatorv1_2.c,149 :: 		bpmv=12;
0x01AC	0x300C      	MOVLW      12
0x01AD	0x00C5      	MOVWF      _bpmv
0x01AE	0x3000      	MOVLW      0
0x01AF	0x00C6      	MOVWF      _bpmv+1
;ventilatorv1_2.c,150 :: 		}
L_switches15:
;ventilatorv1_2.c,153 :: 		}
L_switches13:
;ventilatorv1_2.c,158 :: 		if (Button(&PORTB, 4, 1, 0)) {               // Detect logical zero
0x01B0	0x3006      	MOVLW      PORTB
0x01B1	0x1683      	BSF        STATUS, 5
0x01B2	0x00A4      	MOVWF      FARG_Button_port
0x01B3	0x3004      	MOVLW      4
0x01B4	0x00A5      	MOVWF      FARG_Button_pin
0x01B5	0x3001      	MOVLW      1
0x01B6	0x00A6      	MOVWF      FARG_Button_time_ms
0x01B7	0x01A7      	CLRF       FARG_Button_active_state
0x01B8	0x20F7      	CALL       _Button
0x01B9	0x0870      	MOVF       R0, 0
0x01BA	0x1903      	BTFSC      STATUS, 2
0x01BB	0x29BE      	GOTO       L_switches16
;ventilatorv1_2.c,159 :: 		oldvolup = 1;                              // Update flag
0x01BC	0x1283      	BCF        STATUS, 5
0x01BD	0x15E8      	BSF        _oldvolup, BitPos(_oldvolup+0)
;ventilatorv1_2.c,160 :: 		}
L_switches16:
0x01BE	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,161 :: 		if (oldvolup && Button(&PORTB, 4, 1, 1)) {   // Detect zero-to-one transition
0x01BF	0x1DE8      	BTFSS      _oldvolup, BitPos(_oldvolup+0)
0x01C0	0x29F3      	GOTO       L_switches19
0x01C1	0x3006      	MOVLW      PORTB
0x01C2	0x1683      	BSF        STATUS, 5
0x01C3	0x00A4      	MOVWF      FARG_Button_port
0x01C4	0x3004      	MOVLW      4
0x01C5	0x00A5      	MOVWF      FARG_Button_pin
0x01C6	0x3001      	MOVLW      1
0x01C7	0x00A6      	MOVWF      FARG_Button_time_ms
0x01C8	0x3001      	MOVLW      1
0x01C9	0x00A7      	MOVWF      FARG_Button_active_state
0x01CA	0x20F7      	CALL       _Button
0x01CB	0x0870      	MOVF       R0, 0
0x01CC	0x1903      	BTFSC      STATUS, 2
0x01CD	0x29F3      	GOTO       L_switches19
L__switches83:
;ventilatorv1_2.c,162 :: 		oldvolup = 0;                    // Update flag
0x01CE	0x1283      	BCF        STATUS, 5
0x01CF	0x11E8      	BCF        _oldvolup, BitPos(_oldvolup+0)
;ventilatorv1_2.c,164 :: 		vol=vol+50;              //increment volume level by 50
0x01D0	0x3032      	MOVLW      50
0x01D1	0x0764      	ADDWF      _vol, 0
0x01D2	0x00F1      	MOVWF      R1
0x01D3	0x0865      	MOVF       _vol+1, 0
0x01D4	0x1803      	BTFSC      STATUS, 0
0x01D5	0x3E01      	ADDLW      1
0x01D6	0x00F2      	MOVWF      R1+1
0x01D7	0x0871      	MOVF       R1, 0
0x01D8	0x00E4      	MOVWF      _vol
0x01D9	0x0872      	MOVF       R1+1, 0
0x01DA	0x00E5      	MOVWF      _vol+1
;ventilatorv1_2.c,165 :: 		if(vol>550){                                         //limit volume level
0x01DB	0x0872      	MOVF       R1+1, 0
0x01DC	0x3C02      	SUBLW      2
0x01DD	0x1D03      	BTFSS      STATUS, 2
0x01DE	0x29E1      	GOTO       L__switches104
0x01DF	0x0871      	MOVF       R1, 0
0x01E0	0x3C26      	SUBLW      38
L__switches104:
0x01E1	0x1803      	BTFSC      STATUS, 0
0x01E2	0x29E7      	GOTO       L_switches20
;ventilatorv1_2.c,166 :: 		vol=550;
0x01E3	0x3026      	MOVLW      38
0x01E4	0x00E4      	MOVWF      _vol
0x01E5	0x3002      	MOVLW      2
0x01E6	0x00E5      	MOVWF      _vol+1
;ventilatorv1_2.c,167 :: 		}
L_switches20:
;ventilatorv1_2.c,168 :: 		if(vol<450){
0x01E7	0x3001      	MOVLW      1
0x01E8	0x0265      	SUBWF      _vol+1, 0
0x01E9	0x1D03      	BTFSS      STATUS, 2
0x01EA	0x29ED      	GOTO       L__switches105
0x01EB	0x30C2      	MOVLW      194
0x01EC	0x0264      	SUBWF      _vol, 0
L__switches105:
0x01ED	0x1803      	BTFSC      STATUS, 0
0x01EE	0x29F3      	GOTO       L_switches21
;ventilatorv1_2.c,169 :: 		vol=450;
0x01EF	0x30C2      	MOVLW      194
0x01F0	0x00E4      	MOVWF      _vol
0x01F1	0x3001      	MOVLW      1
0x01F2	0x00E5      	MOVWF      _vol+1
;ventilatorv1_2.c,170 :: 		}
L_switches21:
;ventilatorv1_2.c,172 :: 		}
L_switches19:
;ventilatorv1_2.c,174 :: 		if (Button(&PORTB, 5, 1, 0)) {               // Detect logical zero
0x01F3	0x3006      	MOVLW      PORTB
0x01F4	0x1683      	BSF        STATUS, 5
0x01F5	0x00A4      	MOVWF      FARG_Button_port
0x01F6	0x3005      	MOVLW      5
0x01F7	0x00A5      	MOVWF      FARG_Button_pin
0x01F8	0x3001      	MOVLW      1
0x01F9	0x00A6      	MOVWF      FARG_Button_time_ms
0x01FA	0x01A7      	CLRF       FARG_Button_active_state
0x01FB	0x20F7      	CALL       _Button
0x01FC	0x0870      	MOVF       R0, 0
0x01FD	0x1903      	BTFSC      STATUS, 2
0x01FE	0x2A01      	GOTO       L_switches22
;ventilatorv1_2.c,175 :: 		oldvoldown = 1;                              // Update flag
0x01FF	0x1283      	BCF        STATUS, 5
0x0200	0x1568      	BSF        _oldvoldown, BitPos(_oldvoldown+0)
;ventilatorv1_2.c,176 :: 		}
L_switches22:
0x0201	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,177 :: 		if (oldvoldown && Button(&PORTB, 5, 1, 1)) {   // Detect zero-to-one transition
0x0202	0x1D68      	BTFSS      _oldvoldown, BitPos(_oldvoldown+0)
0x0203	0x2A37      	GOTO       L_switches25
0x0204	0x3006      	MOVLW      PORTB
0x0205	0x1683      	BSF        STATUS, 5
0x0206	0x00A4      	MOVWF      FARG_Button_port
0x0207	0x3005      	MOVLW      5
0x0208	0x00A5      	MOVWF      FARG_Button_pin
0x0209	0x3001      	MOVLW      1
0x020A	0x00A6      	MOVWF      FARG_Button_time_ms
0x020B	0x3001      	MOVLW      1
0x020C	0x00A7      	MOVWF      FARG_Button_active_state
0x020D	0x20F7      	CALL       _Button
0x020E	0x0870      	MOVF       R0, 0
0x020F	0x1903      	BTFSC      STATUS, 2
0x0210	0x2A37      	GOTO       L_switches25
L__switches82:
;ventilatorv1_2.c,178 :: 		oldvoldown = 0;                                   // Update flag
0x0211	0x1283      	BCF        STATUS, 5
0x0212	0x1168      	BCF        _oldvoldown, BitPos(_oldvoldown+0)
;ventilatorv1_2.c,180 :: 		vol=vol-50;                                         //decrement volume level
0x0213	0x3032      	MOVLW      50
0x0214	0x0264      	SUBWF      _vol, 0
0x0215	0x00F1      	MOVWF      R1
0x0216	0x3000      	MOVLW      0
0x0217	0x1C03      	BTFSS      STATUS, 0
0x0218	0x3E01      	ADDLW      1
0x0219	0x0265      	SUBWF      _vol+1, 0
0x021A	0x00F2      	MOVWF      R1+1
0x021B	0x0871      	MOVF       R1, 0
0x021C	0x00E4      	MOVWF      _vol
0x021D	0x0872      	MOVF       R1+1, 0
0x021E	0x00E5      	MOVWF      _vol+1
;ventilatorv1_2.c,181 :: 		if(vol>550){                                         //limit volume level
0x021F	0x0872      	MOVF       R1+1, 0
0x0220	0x3C02      	SUBLW      2
0x0221	0x1D03      	BTFSS      STATUS, 2
0x0222	0x2A25      	GOTO       L__switches106
0x0223	0x0871      	MOVF       R1, 0
0x0224	0x3C26      	SUBLW      38
L__switches106:
0x0225	0x1803      	BTFSC      STATUS, 0
0x0226	0x2A2B      	GOTO       L_switches26
;ventilatorv1_2.c,182 :: 		vol=550;
0x0227	0x3026      	MOVLW      38
0x0228	0x00E4      	MOVWF      _vol
0x0229	0x3002      	MOVLW      2
0x022A	0x00E5      	MOVWF      _vol+1
;ventilatorv1_2.c,183 :: 		}
L_switches26:
;ventilatorv1_2.c,184 :: 		if(vol<450){
0x022B	0x3001      	MOVLW      1
0x022C	0x0265      	SUBWF      _vol+1, 0
0x022D	0x1D03      	BTFSS      STATUS, 2
0x022E	0x2A31      	GOTO       L__switches107
0x022F	0x30C2      	MOVLW      194
0x0230	0x0264      	SUBWF      _vol, 0
L__switches107:
0x0231	0x1803      	BTFSC      STATUS, 0
0x0232	0x2A37      	GOTO       L_switches27
;ventilatorv1_2.c,185 :: 		vol=450;
0x0233	0x30C2      	MOVLW      194
0x0234	0x00E4      	MOVWF      _vol
0x0235	0x3001      	MOVLW      1
0x0236	0x00E5      	MOVWF      _vol+1
;ventilatorv1_2.c,186 :: 		}
L_switches27:
;ventilatorv1_2.c,189 :: 		}
L_switches25:
0x0237	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,192 :: 		if ( !startstatus  && Button(&PORTC, 6, 1, 0)) {               // Detect logical zero
0x0238	0x0843      	MOVF       _startstatus, 0
0x0239	0x0444      	IORWF      _startstatus+1, 0
0x023A	0x1D03      	BTFSS      STATUS, 2
0x023B	0x2A4E      	GOTO       L_switches30
0x023C	0x3007      	MOVLW      PORTC
0x023D	0x1683      	BSF        STATUS, 5
0x023E	0x00A4      	MOVWF      FARG_Button_port
0x023F	0x3006      	MOVLW      6
0x0240	0x00A5      	MOVWF      FARG_Button_pin
0x0241	0x3001      	MOVLW      1
0x0242	0x00A6      	MOVWF      FARG_Button_time_ms
0x0243	0x01A7      	CLRF       FARG_Button_active_state
0x0244	0x20F7      	CALL       _Button
0x0245	0x0870      	MOVF       R0, 0
0x0246	0x1903      	BTFSC      STATUS, 2
0x0247	0x2A4E      	GOTO       L_switches30
L__switches81:
;ventilatorv1_2.c,194 :: 		startl=1;                                      //led indicator
0x0248	0x1283      	BCF        STATUS, 5
0x0249	0x1608      	BSF        PORTD, 4
;ventilatorv1_2.c,195 :: 		startstatus = 1;                              // Update flag
0x024A	0x3001      	MOVLW      1
0x024B	0x00C3      	MOVWF      _startstatus
0x024C	0x3000      	MOVLW      0
0x024D	0x00C4      	MOVWF      _startstatus+1
;ventilatorv1_2.c,196 :: 		}
L_switches30:
0x024E	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,197 :: 		if (startstatus && Button(&PORTC, 7, 1, 0)) {   // Detect logical zero
0x024F	0x0843      	MOVF       _startstatus, 0
0x0250	0x0444      	IORWF      _startstatus+1, 0
0x0251	0x1903      	BTFSC      STATUS, 2
0x0252	0x2A63      	GOTO       L_switches33
0x0253	0x3007      	MOVLW      PORTC
0x0254	0x1683      	BSF        STATUS, 5
0x0255	0x00A4      	MOVWF      FARG_Button_port
0x0256	0x3007      	MOVLW      7
0x0257	0x00A5      	MOVWF      FARG_Button_pin
0x0258	0x3001      	MOVLW      1
0x0259	0x00A6      	MOVWF      FARG_Button_time_ms
0x025A	0x01A7      	CLRF       FARG_Button_active_state
0x025B	0x20F7      	CALL       _Button
0x025C	0x0870      	MOVF       R0, 0
0x025D	0x1903      	BTFSC      STATUS, 2
0x025E	0x2A63      	GOTO       L_switches33
L__switches80:
;ventilatorv1_2.c,199 :: 		startl=0;                                    //led indicator
0x025F	0x1283      	BCF        STATUS, 5
0x0260	0x1208      	BCF        PORTD, 4
;ventilatorv1_2.c,200 :: 		startstatus = 0;               // Update flag
0x0261	0x01C3      	CLRF       _startstatus
0x0262	0x01C4      	CLRF       _startstatus+1
;ventilatorv1_2.c,201 :: 		}
L_switches33:
;ventilatorv1_2.c,205 :: 		switch (vol){                       //led value for each volume level
0x0263	0x2A80      	GOTO       L_switches34
;ventilatorv1_2.c,206 :: 		case 450:
L_switches36:
0x0264	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,207 :: 		led[5]=1;
0x0265	0x3001      	MOVLW      1
0x0266	0x00B3      	MOVWF      _led+10
0x0267	0x3000      	MOVLW      0
0x0268	0x00B4      	MOVWF      _led+11
;ventilatorv1_2.c,208 :: 		led[6]=0;
0x0269	0x01B5      	CLRF       _led+12
0x026A	0x01B6      	CLRF       _led+13
;ventilatorv1_2.c,209 :: 		led[7]=0;
0x026B	0x01B7      	CLRF       _led+14
0x026C	0x01B8      	CLRF       _led+15
;ventilatorv1_2.c,211 :: 		break;
0x026D	0x2A99      	GOTO       L_switches35
;ventilatorv1_2.c,212 :: 		case 500:
L_switches37:
;ventilatorv1_2.c,213 :: 		led[5]=0;
0x026E	0x01B3      	CLRF       _led+10
0x026F	0x01B4      	CLRF       _led+11
;ventilatorv1_2.c,214 :: 		led[6]=1;
0x0270	0x3001      	MOVLW      1
0x0271	0x00B5      	MOVWF      _led+12
0x0272	0x3000      	MOVLW      0
0x0273	0x00B6      	MOVWF      _led+13
;ventilatorv1_2.c,215 :: 		led[7]=0;
0x0274	0x01B7      	CLRF       _led+14
0x0275	0x01B8      	CLRF       _led+15
;ventilatorv1_2.c,217 :: 		break;
0x0276	0x2A99      	GOTO       L_switches35
;ventilatorv1_2.c,218 :: 		case 550:
L_switches38:
;ventilatorv1_2.c,219 :: 		led[5]=0;
0x0277	0x01B3      	CLRF       _led+10
0x0278	0x01B4      	CLRF       _led+11
;ventilatorv1_2.c,220 :: 		led[6]=0;
0x0279	0x01B5      	CLRF       _led+12
0x027A	0x01B6      	CLRF       _led+13
;ventilatorv1_2.c,221 :: 		led[7]=1;
0x027B	0x3001      	MOVLW      1
0x027C	0x00B7      	MOVWF      _led+14
0x027D	0x3000      	MOVLW      0
0x027E	0x00B8      	MOVWF      _led+15
;ventilatorv1_2.c,223 :: 		break;
0x027F	0x2A99      	GOTO       L_switches35
;ventilatorv1_2.c,225 :: 		}
L_switches34:
0x0280	0x1283      	BCF        STATUS, 5
0x0281	0x0865      	MOVF       _vol+1, 0
0x0282	0x3A01      	XORLW      1
0x0283	0x1D03      	BTFSS      STATUS, 2
0x0284	0x2A87      	GOTO       L__switches108
0x0285	0x30C2      	MOVLW      194
0x0286	0x0664      	XORWF      _vol, 0
L__switches108:
0x0287	0x1903      	BTFSC      STATUS, 2
0x0288	0x2A64      	GOTO       L_switches36
0x0289	0x0865      	MOVF       _vol+1, 0
0x028A	0x3A01      	XORLW      1
0x028B	0x1D03      	BTFSS      STATUS, 2
0x028C	0x2A8F      	GOTO       L__switches109
0x028D	0x30F4      	MOVLW      244
0x028E	0x0664      	XORWF      _vol, 0
L__switches109:
0x028F	0x1903      	BTFSC      STATUS, 2
0x0290	0x2A6E      	GOTO       L_switches37
0x0291	0x0865      	MOVF       _vol+1, 0
0x0292	0x3A02      	XORLW      2
0x0293	0x1D03      	BTFSS      STATUS, 2
0x0294	0x2A97      	GOTO       L__switches110
0x0295	0x3026      	MOVLW      38
0x0296	0x0664      	XORWF      _vol, 0
L__switches110:
0x0297	0x1903      	BTFSC      STATUS, 2
0x0298	0x2A77      	GOTO       L_switches38
L_switches35:
;ventilatorv1_2.c,227 :: 		switch (bpmv){                           //led value for each bpm value
0x0299	0x2ADB      	GOTO       L_switches39
;ventilatorv1_2.c,228 :: 		case 12:
L_switches41:
;ventilatorv1_2.c,229 :: 		led[0]=1;
0x029A	0x3001      	MOVLW      1
0x029B	0x00A9      	MOVWF      _led
0x029C	0x3000      	MOVLW      0
0x029D	0x00AA      	MOVWF      _led+1
;ventilatorv1_2.c,230 :: 		led[1]=0;
0x029E	0x01AB      	CLRF       _led+2
0x029F	0x01AC      	CLRF       _led+3
;ventilatorv1_2.c,231 :: 		led[2]=0;
0x02A0	0x01AD      	CLRF       _led+4
0x02A1	0x01AE      	CLRF       _led+5
;ventilatorv1_2.c,232 :: 		led[3]=0;
0x02A2	0x01AF      	CLRF       _led+6
0x02A3	0x01B0      	CLRF       _led+7
;ventilatorv1_2.c,233 :: 		led[4]=0;
0x02A4	0x01B1      	CLRF       _led+8
0x02A5	0x01B2      	CLRF       _led+9
;ventilatorv1_2.c,234 :: 		break;
0x02A6	0x2B03      	GOTO       L_switches40
;ventilatorv1_2.c,235 :: 		case 13:
L_switches42:
;ventilatorv1_2.c,236 :: 		led[0]=0;
0x02A7	0x01A9      	CLRF       _led
0x02A8	0x01AA      	CLRF       _led+1
;ventilatorv1_2.c,237 :: 		led[1]=1;
0x02A9	0x3001      	MOVLW      1
0x02AA	0x00AB      	MOVWF      _led+2
0x02AB	0x3000      	MOVLW      0
0x02AC	0x00AC      	MOVWF      _led+3
;ventilatorv1_2.c,238 :: 		led[2]=0;
0x02AD	0x01AD      	CLRF       _led+4
0x02AE	0x01AE      	CLRF       _led+5
;ventilatorv1_2.c,239 :: 		led[3]=0;
0x02AF	0x01AF      	CLRF       _led+6
0x02B0	0x01B0      	CLRF       _led+7
;ventilatorv1_2.c,240 :: 		led[4]=0;
0x02B1	0x01B1      	CLRF       _led+8
0x02B2	0x01B2      	CLRF       _led+9
;ventilatorv1_2.c,241 :: 		break;
0x02B3	0x2B03      	GOTO       L_switches40
;ventilatorv1_2.c,242 :: 		case 14:
L_switches43:
;ventilatorv1_2.c,243 :: 		led[0]=0;
0x02B4	0x01A9      	CLRF       _led
0x02B5	0x01AA      	CLRF       _led+1
;ventilatorv1_2.c,244 :: 		led[1]=0;
0x02B6	0x01AB      	CLRF       _led+2
0x02B7	0x01AC      	CLRF       _led+3
;ventilatorv1_2.c,245 :: 		led[2]=1;
0x02B8	0x3001      	MOVLW      1
0x02B9	0x00AD      	MOVWF      _led+4
0x02BA	0x3000      	MOVLW      0
0x02BB	0x00AE      	MOVWF      _led+5
;ventilatorv1_2.c,246 :: 		led[3]=0;
0x02BC	0x01AF      	CLRF       _led+6
0x02BD	0x01B0      	CLRF       _led+7
;ventilatorv1_2.c,247 :: 		led[4]=0;
0x02BE	0x01B1      	CLRF       _led+8
0x02BF	0x01B2      	CLRF       _led+9
;ventilatorv1_2.c,248 :: 		break;
0x02C0	0x2B03      	GOTO       L_switches40
;ventilatorv1_2.c,249 :: 		case 15:
L_switches44:
;ventilatorv1_2.c,250 :: 		led[0]=0;
0x02C1	0x01A9      	CLRF       _led
0x02C2	0x01AA      	CLRF       _led+1
;ventilatorv1_2.c,251 :: 		led[1]=0;
0x02C3	0x01AB      	CLRF       _led+2
0x02C4	0x01AC      	CLRF       _led+3
;ventilatorv1_2.c,252 :: 		led[2]=0;
0x02C5	0x01AD      	CLRF       _led+4
0x02C6	0x01AE      	CLRF       _led+5
;ventilatorv1_2.c,253 :: 		led[3]=1;
0x02C7	0x3001      	MOVLW      1
0x02C8	0x00AF      	MOVWF      _led+6
0x02C9	0x3000      	MOVLW      0
0x02CA	0x00B0      	MOVWF      _led+7
;ventilatorv1_2.c,254 :: 		led[4]=0;
0x02CB	0x01B1      	CLRF       _led+8
0x02CC	0x01B2      	CLRF       _led+9
;ventilatorv1_2.c,255 :: 		break;
0x02CD	0x2B03      	GOTO       L_switches40
;ventilatorv1_2.c,256 :: 		case 16:
L_switches45:
;ventilatorv1_2.c,257 :: 		led[0]=0;
0x02CE	0x01A9      	CLRF       _led
0x02CF	0x01AA      	CLRF       _led+1
;ventilatorv1_2.c,258 :: 		led[1]=0;
0x02D0	0x01AB      	CLRF       _led+2
0x02D1	0x01AC      	CLRF       _led+3
;ventilatorv1_2.c,259 :: 		led[2]=0;
0x02D2	0x01AD      	CLRF       _led+4
0x02D3	0x01AE      	CLRF       _led+5
;ventilatorv1_2.c,260 :: 		led[3]=0;
0x02D4	0x01AF      	CLRF       _led+6
0x02D5	0x01B0      	CLRF       _led+7
;ventilatorv1_2.c,261 :: 		led[4]=1;
0x02D6	0x3001      	MOVLW      1
0x02D7	0x00B1      	MOVWF      _led+8
0x02D8	0x3000      	MOVLW      0
0x02D9	0x00B2      	MOVWF      _led+9
;ventilatorv1_2.c,262 :: 		break;
0x02DA	0x2B03      	GOTO       L_switches40
;ventilatorv1_2.c,263 :: 		}
L_switches39:
0x02DB	0x3000      	MOVLW      0
0x02DC	0x0646      	XORWF      _bpmv+1, 0
0x02DD	0x1D03      	BTFSS      STATUS, 2
0x02DE	0x2AE1      	GOTO       L__switches111
0x02DF	0x300C      	MOVLW      12
0x02E0	0x0645      	XORWF      _bpmv, 0
L__switches111:
0x02E1	0x1903      	BTFSC      STATUS, 2
0x02E2	0x2A9A      	GOTO       L_switches41
0x02E3	0x3000      	MOVLW      0
0x02E4	0x0646      	XORWF      _bpmv+1, 0
0x02E5	0x1D03      	BTFSS      STATUS, 2
0x02E6	0x2AE9      	GOTO       L__switches112
0x02E7	0x300D      	MOVLW      13
0x02E8	0x0645      	XORWF      _bpmv, 0
L__switches112:
0x02E9	0x1903      	BTFSC      STATUS, 2
0x02EA	0x2AA7      	GOTO       L_switches42
0x02EB	0x3000      	MOVLW      0
0x02EC	0x0646      	XORWF      _bpmv+1, 0
0x02ED	0x1D03      	BTFSS      STATUS, 2
0x02EE	0x2AF1      	GOTO       L__switches113
0x02EF	0x300E      	MOVLW      14
0x02F0	0x0645      	XORWF      _bpmv, 0
L__switches113:
0x02F1	0x1903      	BTFSC      STATUS, 2
0x02F2	0x2AB4      	GOTO       L_switches43
0x02F3	0x3000      	MOVLW      0
0x02F4	0x0646      	XORWF      _bpmv+1, 0
0x02F5	0x1D03      	BTFSS      STATUS, 2
0x02F6	0x2AF9      	GOTO       L__switches114
0x02F7	0x300F      	MOVLW      15
0x02F8	0x0645      	XORWF      _bpmv, 0
L__switches114:
0x02F9	0x1903      	BTFSC      STATUS, 2
0x02FA	0x2AC1      	GOTO       L_switches44
0x02FB	0x3000      	MOVLW      0
0x02FC	0x0646      	XORWF      _bpmv+1, 0
0x02FD	0x1D03      	BTFSS      STATUS, 2
0x02FE	0x2B01      	GOTO       L__switches115
0x02FF	0x3010      	MOVLW      16
0x0300	0x0645      	XORWF      _bpmv, 0
L__switches115:
0x0301	0x1903      	BTFSC      STATUS, 2
0x0302	0x2ACE      	GOTO       L_switches45
L_switches40:
;ventilatorv1_2.c,265 :: 		shiftdata595(led);                  //send out led data
0x0303	0x3029      	MOVLW      _led
0x0304	0x1683      	BSF        STATUS, 5
0x0305	0x00A4      	MOVWF      FARG_shiftdata595__shiftdata
0x0306	0x20C5      	CALL       _shiftdata595
;ventilatorv1_2.c,266 :: 		latch595();
0x0307	0x20BB      	CALL       _latch595
;ventilatorv1_2.c,269 :: 		}
L_end_switches:
0x0308	0x0008      	RETURN
; end of _switches
_selftest:
;ventilatorv1_2.c,271 :: 		void selftest(int fail){
;ventilatorv1_2.c,272 :: 		if(fail){                                         //if self test ok
0x0309	0x1683      	BSF        STATUS, 5
0x030A	0x1303      	BCF        STATUS, 6
0x030B	0x0822      	MOVF       FARG_selftest_fail, 0
0x030C	0x0423      	IORWF      FARG_selftest_fail+1, 0
0x030D	0x1903      	BTFSC      STATUS, 2
0x030E	0x2B16      	GOTO       L_selftest46
;ventilatorv1_2.c,273 :: 		testl=1;                                        //test led on
0x030F	0x1283      	BCF        STATUS, 5
0x0310	0x1588      	BSF        PORTD, 3
;ventilatorv1_2.c,274 :: 		alm_flag=500;
0x0311	0x30F4      	MOVLW      244
0x0312	0x00E6      	MOVWF      _alm_flag
0x0313	0x3001      	MOVLW      1
0x0314	0x00E7      	MOVWF      _alm_flag+1
;ventilatorv1_2.c,275 :: 		}
0x0315	0x2B2B      	GOTO       L_selftest47
L_selftest46:
;ventilatorv1_2.c,277 :: 		while(1){                                        //programme goes into an infinite loop
L_selftest48:
0x0316	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,278 :: 		testl=0;                                          //test led blinks
0x0317	0x1188      	BCF        PORTD, 3
;ventilatorv1_2.c,279 :: 		alm_flag=500;                             //test fail alarm
0x0318	0x30F4      	MOVLW      244
0x0319	0x00E6      	MOVWF      _alm_flag
0x031A	0x3001      	MOVLW      1
0x031B	0x00E7      	MOVWF      _alm_flag+1
;ventilatorv1_2.c,280 :: 		testl=1;
0x031C	0x1588      	BSF        PORTD, 3
;ventilatorv1_2.c,281 :: 		delay_ms(500);
0x031D	0x300D      	MOVLW      13
0x031E	0x00FB      	MOVWF      R11
0x031F	0x30AF      	MOVLW      175
0x0320	0x00FC      	MOVWF      R12
0x0321	0x30B6      	MOVLW      182
0x0322	0x00FD      	MOVWF      R13
L_selftest50:
0x0323	0x0BFD      	DECFSZ     R13, 1
0x0324	0x2B23      	GOTO       L_selftest50
0x0325	0x0BFC      	DECFSZ     R12, 1
0x0326	0x2B23      	GOTO       L_selftest50
0x0327	0x0BFB      	DECFSZ     R11, 1
0x0328	0x2B23      	GOTO       L_selftest50
0x0329	0x0000      	NOP
;ventilatorv1_2.c,282 :: 		}
0x032A	0x2B16      	GOTO       L_selftest48
;ventilatorv1_2.c,283 :: 		}
L_selftest47:
;ventilatorv1_2.c,285 :: 		}
L_end_selftest:
0x032B	0x0008      	RETURN
; end of _selftest
_InitTimer0:
;ventilatorv1_2.c,315 :: 		void InitTimer0(){                //timero initialization
;ventilatorv1_2.c,316 :: 		OPTION_REG         = 0x84;
0x032C	0x3084      	MOVLW      132
0x032D	0x1683      	BSF        STATUS, 5
0x032E	0x1303      	BCF        STATUS, 6
0x032F	0x0081      	MOVWF      OPTION_REG
;ventilatorv1_2.c,317 :: 		TMR0                 = 100;
0x0330	0x3064      	MOVLW      100
0x0331	0x1283      	BCF        STATUS, 5
0x0332	0x0081      	MOVWF      TMR0
;ventilatorv1_2.c,318 :: 		INTCON         = 0xA0;
0x0333	0x30A0      	MOVLW      160
0x0334	0x008B      	MOVWF      INTCON
;ventilatorv1_2.c,319 :: 		}
L_end_InitTimer0:
0x0335	0x0008      	RETURN
; end of _InitTimer0
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0336	0x2131      	CALL       _____DoICP
0x0337	0x118A      	BCF        PCLATH, 3
0x0338	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0339	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x033A	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x033B	0x0AEE      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x033C	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x033D	0x0AEF      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x033E	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x033F	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0340	0x2B36      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0341	0x0008      	RETURN
; end of ___CC2DW
_read_sensor_data:
;ventilatorv1_2.c,287 :: 		void read_sensor_data(){     //reading all analog sensor data
;ventilatorv1_2.c,288 :: 		s4=ADC_Read(0);
0x0342	0x1683      	BSF        STATUS, 5
0x0343	0x1303      	BCF        STATUS, 6
0x0344	0x01A4      	CLRF       FARG_ADC_Read_channel
0x0345	0x2093      	CALL       _ADC_Read
0x0346	0x0870      	MOVF       R0, 0
0x0347	0x1283      	BCF        STATUS, 5
0x0348	0x00CB      	MOVWF      _s4
0x0349	0x0871      	MOVF       R0+1, 0
0x034A	0x00CC      	MOVWF      _s4+1
;ventilatorv1_2.c,290 :: 		s9= ADC_Read(1);
0x034B	0x3001      	MOVLW      1
0x034C	0x1683      	BSF        STATUS, 5
0x034D	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x034E	0x2093      	CALL       _ADC_Read
0x034F	0x0870      	MOVF       R0, 0
0x0350	0x1283      	BCF        STATUS, 5
0x0351	0x00DC      	MOVWF      _s9
0x0352	0x0871      	MOVF       R0+1, 0
0x0353	0x00DD      	MOVWF      _s9+1
;ventilatorv1_2.c,292 :: 		s10 =  ADC_Read(2);
0x0354	0x3002      	MOVLW      2
0x0355	0x1683      	BSF        STATUS, 5
0x0356	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x0357	0x2093      	CALL       _ADC_Read
0x0358	0x0870      	MOVF       R0, 0
0x0359	0x1283      	BCF        STATUS, 5
0x035A	0x00DA      	MOVWF      _s10
0x035B	0x0871      	MOVF       R0+1, 0
0x035C	0x00DB      	MOVWF      _s10+1
;ventilatorv1_2.c,294 :: 		p1  = ADC_Read(3);
0x035D	0x3003      	MOVLW      3
0x035E	0x1683      	BSF        STATUS, 5
0x035F	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x0360	0x2093      	CALL       _ADC_Read
0x0361	0x0870      	MOVF       R0, 0
0x0362	0x1283      	BCF        STATUS, 5
0x0363	0x00BF      	MOVWF      _p1
0x0364	0x0871      	MOVF       R0+1, 0
0x0365	0x00C0      	MOVWF      _p1+1
;ventilatorv1_2.c,296 :: 		p2   = ADC_Read(4);
0x0366	0x3004      	MOVLW      4
0x0367	0x1683      	BSF        STATUS, 5
0x0368	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x0369	0x2093      	CALL       _ADC_Read
0x036A	0x0870      	MOVF       R0, 0
0x036B	0x1283      	BCF        STATUS, 5
0x036C	0x00BD      	MOVWF      _p2
0x036D	0x0871      	MOVF       R0+1, 0
0x036E	0x00BE      	MOVWF      _p2+1
;ventilatorv1_2.c,298 :: 		p3 =   ADC_Read(5);
0x036F	0x3005      	MOVLW      5
0x0370	0x1683      	BSF        STATUS, 5
0x0371	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x0372	0x2093      	CALL       _ADC_Read
0x0373	0x0870      	MOVF       R0, 0
0x0374	0x1283      	BCF        STATUS, 5
0x0375	0x00CD      	MOVWF      _p3
0x0376	0x0871      	MOVF       R0+1, 0
0x0377	0x00CE      	MOVWF      _p3+1
;ventilatorv1_2.c,300 :: 		p_1  =  ADC_Read(6);
0x0378	0x3006      	MOVLW      6
0x0379	0x1683      	BSF        STATUS, 5
0x037A	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x037B	0x2093      	CALL       _ADC_Read
0x037C	0x0870      	MOVF       R0, 0
0x037D	0x1283      	BCF        STATUS, 5
0x037E	0x00C7      	MOVWF      _p_1
0x037F	0x0871      	MOVF       R0+1, 0
0x0380	0x00C8      	MOVWF      _p_1+1
;ventilatorv1_2.c,302 :: 		p_2  =  ADC_Read(7);
0x0381	0x3007      	MOVLW      7
0x0382	0x1683      	BSF        STATUS, 5
0x0383	0x00A4      	MOVWF      FARG_ADC_Read_channel
0x0384	0x2093      	CALL       _ADC_Read
0x0385	0x0870      	MOVF       R0, 0
0x0386	0x1283      	BCF        STATUS, 5
0x0387	0x00C9      	MOVWF      _p_2
0x0388	0x0871      	MOVF       R0+1, 0
0x0389	0x00CA      	MOVWF      _p_2+1
;ventilatorv1_2.c,304 :: 		}
L_end_read_sensor_data:
0x038A	0x0008      	RETURN
; end of _read_sensor_data
_millis:
;ventilatorv1_2.c,98 :: 		unsigned long millis()
;ventilatorv1_2.c,100 :: 		return(millis_count);
0x038B	0x1283      	BCF        STATUS, 5
0x038C	0x1303      	BCF        STATUS, 6
0x038D	0x0854      	MOVF       _millis_count, 0
0x038E	0x00F0      	MOVWF      R0
0x038F	0x0855      	MOVF       _millis_count+1, 0
0x0390	0x00F1      	MOVWF      R0+1
0x0391	0x0856      	MOVF       _millis_count+2, 0
0x0392	0x00F2      	MOVWF      R0+2
0x0393	0x0857      	MOVF       _millis_count+3, 0
0x0394	0x00F3      	MOVWF      R0+3
;ventilatorv1_2.c,101 :: 		}
L_end_millis:
0x0395	0x0008      	RETURN
; end of _millis
_ADC_Init:
;__Lib_ADC_A_C.c,19 :: 		
;__Lib_ADC_A_C.c,20 :: 		
0x0396	0x30FF      	MOVLW      _ADC_Get_Sample
0x0397	0x1283      	BCF        STATUS, 5
0x0398	0x1303      	BCF        STATUS, 6
0x0399	0x00E9      	MOVWF      _ADC_Get_Sample_Ptr
0x039A	0x30FF      	MOVLW      hi_addr(_ADC_Get_Sample)
0x039B	0x00EA      	MOVWF      _ADC_Get_Sample_Ptr+1
0x039C	0x30FF      	MOVLW      FARG_ADC_Get_Sample_channel
0x039D	0x00EB      	MOVWF      _ADC_Get_Sample_Ptr+2
0x039E	0x30FF      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
;__Lib_ADC_A_C.c,22 :: 		
0x039F	0x019F      	CLRF       ADCON0
;__Lib_ADC_A_C.c,23 :: 		
0x03A0	0x30C0      	MOVLW      192
0x03A1	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_A_C.c,24 :: 		
0x03A2	0x0953      	COMF       _vref_mask, 0
0x03A3	0x00F0      	MOVWF      R0
0x03A4	0x0870      	MOVF       R0, 0
0x03A5	0x1683      	BSF        STATUS, 5
0x03A6	0x059F      	ANDWF      ADCON1, 1
;__Lib_ADC_A_C.c,25 :: 		
0x03A7	0x171F      	BSF        ADCON1, 6
;__Lib_ADC_A_C.c,26 :: 		
0x03A8	0x179F      	BSF        ADCON1, 7
;__Lib_ADC_A_C.c,29 :: 		
0x03A9	0x1283      	BCF        STATUS, 5
0x03AA	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_A_C.c,30 :: 		
L_end_ADC_Init:
0x03AB	0x0008      	RETURN
; end of _ADC_Init
_main:
0x03AC	0x2578      	CALL       1400
;ventilatorv1_2.c,340 :: 		void main()
;ventilatorv1_2.c,343 :: 		ADCON1 = 0x80;
0x03AD	0x3080      	MOVLW      128
0x03AE	0x1683      	BSF        STATUS, 5
0x03AF	0x1303      	BCF        STATUS, 6
0x03B0	0x009F      	MOVWF      ADCON1
;ventilatorv1_2.c,344 :: 		TRISA  = 0xFF;// PORTA is input
0x03B1	0x30FF      	MOVLW      255
0x03B2	0x0085      	MOVWF      TRISA
;ventilatorv1_2.c,345 :: 		PORTB=0;  // set portB as digital
0x03B3	0x1283      	BCF        STATUS, 5
0x03B4	0x0186      	CLRF       PORTB
;ventilatorv1_2.c,346 :: 		TRISB=0xf0;  // set portB input/outputs
0x03B5	0x30F0      	MOVLW      240
0x03B6	0x1683      	BSF        STATUS, 5
0x03B7	0x0086      	MOVWF      TRISB
;ventilatorv1_2.c,347 :: 		PORTC=0;  // set portC as digital
0x03B8	0x1283      	BCF        STATUS, 5
0x03B9	0x0187      	CLRF       PORTC
;ventilatorv1_2.c,348 :: 		TRISC=0xff;  // set portC as inputs
0x03BA	0x30FF      	MOVLW      255
0x03BB	0x1683      	BSF        STATUS, 5
0x03BC	0x0087      	MOVWF      TRISC
;ventilatorv1_2.c,349 :: 		PORTD=0x00;  // set portD as digital
0x03BD	0x1283      	BCF        STATUS, 5
0x03BE	0x0188      	CLRF       PORTD
;ventilatorv1_2.c,350 :: 		TRISD=0x00;  // set portD as outputs
0x03BF	0x1683      	BSF        STATUS, 5
0x03C0	0x0188      	CLRF       TRISD
;ventilatorv1_2.c,351 :: 		TRISE  = 0x07; // PORTE as analog input
0x03C1	0x3007      	MOVLW      7
0x03C2	0x0089      	MOVWF      TRISE
;ventilatorv1_2.c,352 :: 		ADC_Init();
0x03C3	0x2396      	CALL       _ADC_Init
;ventilatorv1_2.c,353 :: 		InitTimer0();//inica conte timer cada milisegundo
0x03C4	0x232C      	CALL       _InitTimer0
;ventilatorv1_2.c,357 :: 		selftest(1);//do self test
0x03C5	0x3001      	MOVLW      1
0x03C6	0x1683      	BSF        STATUS, 5
0x03C7	0x00A2      	MOVWF      FARG_selftest_fail
0x03C8	0x3000      	MOVLW      0
0x03C9	0x00A3      	MOVWF      FARG_selftest_fail+1
0x03CA	0x2309      	CALL       _selftest
;ventilatorv1_2.c,359 :: 		while(1){
L_main53:
;ventilatorv1_2.c,360 :: 		int tempti=0;
0x03CB	0x1683      	BSF        STATUS, 5
0x03CC	0x01A0      	CLRF       main_tempti_L1
0x03CD	0x01A1      	CLRF       main_tempti_L1+1
;ventilatorv1_2.c,361 :: 		if(startstatus)  {
0x03CE	0x1283      	BCF        STATUS, 5
0x03CF	0x0843      	MOVF       _startstatus, 0
0x03D0	0x0444      	IORWF      _startstatus+1, 0
0x03D1	0x1903      	BTFSC      STATUS, 2
0x03D2	0x2D2E      	GOTO       L_main55
;ventilatorv1_2.c,363 :: 		s2v=1;             //s2v locked
0x03D3	0x1688      	BSF        PORTD, 5
;ventilatorv1_2.c,364 :: 		dcv1=1;             //dcv1 on
0x03D4	0x1408      	BSF        PORTD, 0
;ventilatorv1_2.c,365 :: 		dcv2=1;            //dcv2 on
0x03D5	0x1488      	BSF        PORTD, 1
;ventilatorv1_2.c,366 :: 		delay1=millis();  //flag for delay1
0x03D6	0x238B      	CALL       _millis
0x03D7	0x0870      	MOVF       R0, 0
0x03D8	0x00C1      	MOVWF      _delay1
0x03D9	0x0871      	MOVF       R0+1, 0
0x03DA	0x00C2      	MOVWF      _delay1+1
;ventilatorv1_2.c,367 :: 		while(p1<=200 && startstatus==1){  //dcv1 is on until p1 pressure is good
L_main56:
0x03DB	0x0840      	MOVF       _p1+1, 0
0x03DC	0x3C00      	SUBLW      0
0x03DD	0x1D03      	BTFSS      STATUS, 2
0x03DE	0x2BE1      	GOTO       L__main123
0x03DF	0x083F      	MOVF       _p1, 0
0x03E0	0x3CC8      	SUBLW      200
L__main123:
0x03E1	0x1C03      	BTFSS      STATUS, 0
0x03E2	0x2BED      	GOTO       L_main57
0x03E3	0x3000      	MOVLW      0
0x03E4	0x0644      	XORWF      _startstatus+1, 0
0x03E5	0x1D03      	BTFSS      STATUS, 2
0x03E6	0x2BE9      	GOTO       L__main124
0x03E7	0x3001      	MOVLW      1
0x03E8	0x0643      	XORWF      _startstatus, 0
L__main124:
0x03E9	0x1D03      	BTFSS      STATUS, 2
0x03EA	0x2BED      	GOTO       L_main57
L__main90:
;ventilatorv1_2.c,368 :: 		dcv1=1;
0x03EB	0x1408      	BSF        PORTD, 0
;ventilatorv1_2.c,369 :: 		}
0x03EC	0x2BDB      	GOTO       L_main56
L_main57:
;ventilatorv1_2.c,370 :: 		dcv1=0;            //dcv2 on after pressure is ok
0x03ED	0x1008      	BCF        PORTD, 0
;ventilatorv1_2.c,373 :: 		if(s4<200 || s9<200 || s10<200){  //checking flow sensor values
0x03EE	0x3000      	MOVLW      0
0x03EF	0x024C      	SUBWF      _s4+1, 0
0x03F0	0x1D03      	BTFSS      STATUS, 2
0x03F1	0x2BF4      	GOTO       L__main125
0x03F2	0x30C8      	MOVLW      200
0x03F3	0x024B      	SUBWF      _s4, 0
L__main125:
0x03F4	0x1C03      	BTFSS      STATUS, 0
0x03F5	0x2C07      	GOTO       L__main89
0x03F6	0x3000      	MOVLW      0
0x03F7	0x025D      	SUBWF      _s9+1, 0
0x03F8	0x1D03      	BTFSS      STATUS, 2
0x03F9	0x2BFC      	GOTO       L__main126
0x03FA	0x30C8      	MOVLW      200
0x03FB	0x025C      	SUBWF      _s9, 0
L__main126:
0x03FC	0x1C03      	BTFSS      STATUS, 0
0x03FD	0x2C07      	GOTO       L__main89
0x03FE	0x3000      	MOVLW      0
0x03FF	0x025B      	SUBWF      _s10+1, 0
0x0400	0x1D03      	BTFSS      STATUS, 2
0x0401	0x2C04      	GOTO       L__main127
0x0402	0x30C8      	MOVLW      200
0x0403	0x025A      	SUBWF      _s10, 0
L__main127:
0x0404	0x1C03      	BTFSS      STATUS, 0
0x0405	0x2C07      	GOTO       L__main89
0x0406	0x2C0C      	GOTO       L_main62
L__main89:
;ventilatorv1_2.c,374 :: 		selftest(0);                 //if flow values are not within safe values error is generated
0x0407	0x1683      	BSF        STATUS, 5
0x0408	0x01A2      	CLRF       FARG_selftest_fail
0x0409	0x01A3      	CLRF       FARG_selftest_fail+1
0x040A	0x2309      	CALL       _selftest
;ventilatorv1_2.c,375 :: 		s2v=0;                      //also s2v valve is unlocked
0x040B	0x1288      	BCF        PORTD, 5
;ventilatorv1_2.c,376 :: 		}
L_main62:
;ventilatorv1_2.c,377 :: 		delay1=millis()-delay1; //calculate time took to generate pressure
0x040C	0x238B      	CALL       _millis
0x040D	0x0841      	MOVF       _delay1, 0
0x040E	0x0270      	SUBWF      R0, 0
0x040F	0x00C1      	MOVWF      _delay1
0x0410	0x0842      	MOVF       _delay1+1, 0
0x0411	0x1C03      	BTFSS      STATUS, 0
0x0412	0x3E01      	ADDLW      1
0x0413	0x0271      	SUBWF      R0+1, 0
0x0414	0x00C2      	MOVWF      _delay1+1
;ventilatorv1_2.c,378 :: 		delay2=millis();              //flag for
0x0415	0x238B      	CALL       _millis
0x0416	0x0870      	MOVF       R0, 0
0x0417	0x00D8      	MOVWF      _delay2
0x0418	0x0871      	MOVF       R0+1, 0
0x0419	0x00D9      	MOVWF      _delay2+1
;ventilatorv1_2.c,379 :: 		while(temperature && startstatus==1){          //heating air
L_main63:
0x041A	0x0862      	MOVF       _temperature, 0
0x041B	0x0463      	IORWF      _temperature+1, 0
0x041C	0x1903      	BTFSC      STATUS, 2
0x041D	0x2C28      	GOTO       L_main64
0x041E	0x3000      	MOVLW      0
0x041F	0x0644      	XORWF      _startstatus+1, 0
0x0420	0x1D03      	BTFSS      STATUS, 2
0x0421	0x2C24      	GOTO       L__main128
0x0422	0x3001      	MOVLW      1
0x0423	0x0643      	XORWF      _startstatus, 0
L__main128:
0x0424	0x1D03      	BTFSS      STATUS, 2
0x0425	0x2C28      	GOTO       L_main64
L__main88:
;ventilatorv1_2.c,380 :: 		heater=1;
0x0426	0x1708      	BSF        PORTD, 6
;ventilatorv1_2.c,381 :: 		}
0x0427	0x2C1A      	GOTO       L_main63
L_main64:
;ventilatorv1_2.c,382 :: 		heater=0;                     //turn off heater after temperature is ok
0x0428	0x1308      	BCF        PORTD, 6
;ventilatorv1_2.c,383 :: 		if(temperature<20){            //if temperature is not within limit error is generated
0x0429	0x3000      	MOVLW      0
0x042A	0x0263      	SUBWF      _temperature+1, 0
0x042B	0x1D03      	BTFSS      STATUS, 2
0x042C	0x2C2F      	GOTO       L__main129
0x042D	0x3014      	MOVLW      20
0x042E	0x0262      	SUBWF      _temperature, 0
L__main129:
0x042F	0x1803      	BTFSC      STATUS, 0
0x0430	0x2C36      	GOTO       L_main67
;ventilatorv1_2.c,384 :: 		selftest(0);
0x0431	0x1683      	BSF        STATUS, 5
0x0432	0x01A2      	CLRF       FARG_selftest_fail
0x0433	0x01A3      	CLRF       FARG_selftest_fail+1
0x0434	0x2309      	CALL       _selftest
;ventilatorv1_2.c,385 :: 		s2v=0;                        //s2v ulockec
0x0435	0x1288      	BCF        PORTD, 5
;ventilatorv1_2.c,386 :: 		}
L_main67:
;ventilatorv1_2.c,387 :: 		delay2=millis()-delay2;        //calculating time took for heating
0x0436	0x238B      	CALL       _millis
0x0437	0x0858      	MOVF       _delay2, 0
0x0438	0x0270      	SUBWF      R0, 0
0x0439	0x00D8      	MOVWF      _delay2
0x043A	0x0859      	MOVF       _delay2+1, 0
0x043B	0x1C03      	BTFSS      STATUS, 0
0x043C	0x3E01      	ADDLW      1
0x043D	0x0271      	SUBWF      R0+1, 0
0x043E	0x00D9      	MOVWF      _delay2+1
;ventilatorv1_2.c,388 :: 		delay3=millis();               //flag for delay3
0x043F	0x238B      	CALL       _millis
0x0440	0x0870      	MOVF       R0, 0
0x0441	0x00E0      	MOVWF      _delay3
0x0442	0x0871      	MOVF       R0+1, 0
0x0443	0x00E1      	MOVWF      _delay3+1
;ventilatorv1_2.c,389 :: 		tempti=inhtime-(delay1+delay2);    //  calculating left time for inhale
0x0444	0x0858      	MOVF       _delay2, 0
0x0445	0x0741      	ADDWF      _delay1, 0
0x0446	0x00F0      	MOVWF      R0
0x0447	0x0842      	MOVF       _delay1+1, 0
0x0448	0x1803      	BTFSC      STATUS, 0
0x0449	0x3E01      	ADDLW      1
0x044A	0x0759      	ADDWF      _delay2+1, 0
0x044B	0x00F1      	MOVWF      R0+1
0x044C	0x0870      	MOVF       R0, 0
0x044D	0x025E      	SUBWF      _inhtime, 0
0x044E	0x1683      	BSF        STATUS, 5
0x044F	0x00A0      	MOVWF      main_tempti_L1
0x0450	0x0871      	MOVF       R0+1, 0
0x0451	0x1C03      	BTFSS      STATUS, 0
0x0452	0x3E01      	ADDLW      1
0x0453	0x1283      	BCF        STATUS, 5
0x0454	0x025F      	SUBWF      _inhtime+1, 0
0x0455	0x1683      	BSF        STATUS, 5
0x0456	0x00A1      	MOVWF      main_tempti_L1+1
;ventilatorv1_2.c,391 :: 		while((millis()-delay3<=tempti )&& startstatus==1){    //wait untill inhale finish
L_main68:
0x0457	0x238B      	CALL       _millis
0x0458	0x0860      	MOVF       _delay3, 0
0x0459	0x00F8      	MOVWF      R8
0x045A	0x0861      	MOVF       _delay3+1, 0
0x045B	0x00F9      	MOVWF      R8+1
0x045C	0x01FA      	CLRF       R8+2
0x045D	0x01FB      	CLRF       R8+3
0x045E	0x0870      	MOVF       R0, 0
0x045F	0x00F4      	MOVWF      R4
0x0460	0x0871      	MOVF       R0+1, 0
0x0461	0x00F5      	MOVWF      R4+1
0x0462	0x0872      	MOVF       R0+2, 0
0x0463	0x00F6      	MOVWF      R4+2
0x0464	0x0873      	MOVF       R0+3, 0
0x0465	0x00F7      	MOVWF      R4+3
0x0466	0x0878      	MOVF       R8, 0
0x0467	0x02F4      	SUBWF      R4, 1
0x0468	0x0879      	MOVF       R8+1, 0
0x0469	0x1C03      	BTFSS      STATUS, 0
0x046A	0x0F79      	INCFSZ     R8+1, 0
0x046B	0x02F5      	SUBWF      R4+1, 1
0x046C	0x087A      	MOVF       R8+2, 0
0x046D	0x1C03      	BTFSS      STATUS, 0
0x046E	0x0F7A      	INCFSZ     R8+2, 0
0x046F	0x02F6      	SUBWF      R4+2, 1
0x0470	0x087B      	MOVF       R8+3, 0
0x0471	0x1C03      	BTFSS      STATUS, 0
0x0472	0x0F7B      	INCFSZ     R8+3, 0
0x0473	0x02F7      	SUBWF      R4+3, 1
0x0474	0x3000      	MOVLW      0
0x0475	0x1683      	BSF        STATUS, 5
0x0476	0x1BA1      	BTFSC      main_tempti_L1+1, 7
0x0477	0x30FF      	MOVLW      255
0x0478	0x00F0      	MOVWF      R0
0x0479	0x0877      	MOVF       R4+3, 0
0x047A	0x0270      	SUBWF      R0, 0
0x047B	0x1D03      	BTFSS      STATUS, 2
0x047C	0x2C8B      	GOTO       L__main130
0x047D	0x3000      	MOVLW      0
0x047E	0x1BA1      	BTFSC      main_tempti_L1+1, 7
0x047F	0x30FF      	MOVLW      255
0x0480	0x00F0      	MOVWF      R0
0x0481	0x0876      	MOVF       R4+2, 0
0x0482	0x0270      	SUBWF      R0, 0
0x0483	0x1D03      	BTFSS      STATUS, 2
0x0484	0x2C8B      	GOTO       L__main130
0x0485	0x0875      	MOVF       R4+1, 0
0x0486	0x0221      	SUBWF      main_tempti_L1+1, 0
0x0487	0x1D03      	BTFSS      STATUS, 2
0x0488	0x2C8B      	GOTO       L__main130
0x0489	0x0874      	MOVF       R4, 0
0x048A	0x0220      	SUBWF      main_tempti_L1, 0
L__main130:
0x048B	0x1C03      	BTFSS      STATUS, 0
0x048C	0x2C97      	GOTO       L_main69
0x048D	0x3000      	MOVLW      0
0x048E	0x1283      	BCF        STATUS, 5
0x048F	0x0644      	XORWF      _startstatus+1, 0
0x0490	0x1D03      	BTFSS      STATUS, 2
0x0491	0x2C94      	GOTO       L__main131
0x0492	0x3001      	MOVLW      1
0x0493	0x0643      	XORWF      _startstatus, 0
L__main131:
0x0494	0x1D03      	BTFSS      STATUS, 2
0x0495	0x2C97      	GOTO       L_main69
L__main87:
;ventilatorv1_2.c,393 :: 		}
0x0496	0x2C57      	GOTO       L_main68
L_main69:
0x0497	0x1283      	BCF        STATUS, 5
;ventilatorv1_2.c,394 :: 		dcv2=0; //   dcv2 off
0x0498	0x1088      	BCF        PORTD, 1
;ventilatorv1_2.c,395 :: 		tempti=0;
0x0499	0x1683      	BSF        STATUS, 5
0x049A	0x01A0      	CLRF       main_tempti_L1
0x049B	0x01A1      	CLRF       main_tempti_L1+1
;ventilatorv1_2.c,396 :: 		delay3=millis()-delay3;// calculating delay 3
0x049C	0x238B      	CALL       _millis
0x049D	0x0860      	MOVF       _delay3, 0
0x049E	0x0270      	SUBWF      R0, 0
0x049F	0x00E0      	MOVWF      _delay3
0x04A0	0x0861      	MOVF       _delay3+1, 0
0x04A1	0x1C03      	BTFSS      STATUS, 0
0x04A2	0x3E01      	ADDLW      1
0x04A3	0x0271      	SUBWF      R0+1, 0
0x04A4	0x00E1      	MOVWF      _delay3+1
;ventilatorv1_2.c,397 :: 		s2v=0;           //s2v off
0x04A5	0x1288      	BCF        PORTD, 5
;ventilatorv1_2.c,398 :: 		delay4=millis();  //flag for delay 4
0x04A6	0x238B      	CALL       _millis
0x04A7	0x0870      	MOVF       R0, 0
0x04A8	0x00D1      	MOVWF      _delay4
0x04A9	0x0871      	MOVF       R0+1, 0
0x04AA	0x00D2      	MOVWF      _delay4+1
;ventilatorv1_2.c,399 :: 		while((millis()-delay4<exhtime)&& startstatus==1){  //wait until exhail finsh
L_main72:
0x04AB	0x238B      	CALL       _millis
0x04AC	0x0851      	MOVF       _delay4, 0
0x04AD	0x00F8      	MOVWF      R8
0x04AE	0x0852      	MOVF       _delay4+1, 0
0x04AF	0x00F9      	MOVWF      R8+1
0x04B0	0x01FA      	CLRF       R8+2
0x04B1	0x01FB      	CLRF       R8+3
0x04B2	0x0870      	MOVF       R0, 0
0x04B3	0x00F4      	MOVWF      R4
0x04B4	0x0871      	MOVF       R0+1, 0
0x04B5	0x00F5      	MOVWF      R4+1
0x04B6	0x0872      	MOVF       R0+2, 0
0x04B7	0x00F6      	MOVWF      R4+2
0x04B8	0x0873      	MOVF       R0+3, 0
0x04B9	0x00F7      	MOVWF      R4+3
0x04BA	0x0878      	MOVF       R8, 0
0x04BB	0x02F4      	SUBWF      R4, 1
0x04BC	0x0879      	MOVF       R8+1, 0
0x04BD	0x1C03      	BTFSS      STATUS, 0
0x04BE	0x0F79      	INCFSZ     R8+1, 0
0x04BF	0x02F5      	SUBWF      R4+1, 1
0x04C0	0x087A      	MOVF       R8+2, 0
0x04C1	0x1C03      	BTFSS      STATUS, 0
0x04C2	0x0F7A      	INCFSZ     R8+2, 0
0x04C3	0x02F6      	SUBWF      R4+2, 1
0x04C4	0x087B      	MOVF       R8+3, 0
0x04C5	0x1C03      	BTFSS      STATUS, 0
0x04C6	0x0F7B      	INCFSZ     R8+3, 0
0x04C7	0x02F7      	SUBWF      R4+3, 1
0x04C8	0x3000      	MOVLW      0
0x04C9	0x0277      	SUBWF      R4+3, 0
0x04CA	0x1D03      	BTFSS      STATUS, 2
0x04CB	0x2CD6      	GOTO       L__main132
0x04CC	0x3000      	MOVLW      0
0x04CD	0x0276      	SUBWF      R4+2, 0
0x04CE	0x1D03      	BTFSS      STATUS, 2
0x04CF	0x2CD6      	GOTO       L__main132
0x04D0	0x0850      	MOVF       _exhtime+1, 0
0x04D1	0x0275      	SUBWF      R4+1, 0
0x04D2	0x1D03      	BTFSS      STATUS, 2
0x04D3	0x2CD6      	GOTO       L__main132
0x04D4	0x084F      	MOVF       _exhtime, 0
0x04D5	0x0274      	SUBWF      R4, 0
L__main132:
0x04D6	0x1803      	BTFSC      STATUS, 0
0x04D7	0x2CEF      	GOTO       L_main73
0x04D8	0x3000      	MOVLW      0
0x04D9	0x0644      	XORWF      _startstatus+1, 0
0x04DA	0x1D03      	BTFSS      STATUS, 2
0x04DB	0x2CDE      	GOTO       L__main133
0x04DC	0x3001      	MOVLW      1
0x04DD	0x0643      	XORWF      _startstatus, 0
L__main133:
0x04DE	0x1D03      	BTFSS      STATUS, 2
0x04DF	0x2CEF      	GOTO       L_main73
L__main86:
;ventilatorv1_2.c,400 :: 		if(p3>200){
0x04E0	0x084E      	MOVF       _p3+1, 0
0x04E1	0x3C00      	SUBLW      0
0x04E2	0x1D03      	BTFSS      STATUS, 2
0x04E3	0x2CE6      	GOTO       L__main134
0x04E4	0x084D      	MOVF       _p3, 0
0x04E5	0x3CC8      	SUBLW      200
L__main134:
0x04E6	0x1803      	BTFSC      STATUS, 0
0x04E7	0x2CE9      	GOTO       L_main76
;ventilatorv1_2.c,402 :: 		}
0x04E8	0x2CEE      	GOTO       L_main77
L_main76:
;ventilatorv1_2.c,404 :: 		selftest(0);     //if exhaile pressure not within limits error genrated
0x04E9	0x1683      	BSF        STATUS, 5
0x04EA	0x01A2      	CLRF       FARG_selftest_fail
0x04EB	0x01A3      	CLRF       FARG_selftest_fail+1
0x04EC	0x2309      	CALL       _selftest
;ventilatorv1_2.c,405 :: 		s2v=0;//s2v unlocked
0x04ED	0x1288      	BCF        PORTD, 5
;ventilatorv1_2.c,407 :: 		}
L_main77:
;ventilatorv1_2.c,408 :: 		}
0x04EE	0x2CAB      	GOTO       L_main72
L_main73:
;ventilatorv1_2.c,410 :: 		delay4=millis()-delay4;  //calculating time took for exhalation
0x04EF	0x238B      	CALL       _millis
0x04F0	0x0851      	MOVF       _delay4, 0
0x04F1	0x0270      	SUBWF      R0, 0
0x04F2	0x00F4      	MOVWF      R4
0x04F3	0x0852      	MOVF       _delay4+1, 0
0x04F4	0x1C03      	BTFSS      STATUS, 0
0x04F5	0x3E01      	ADDLW      1
0x04F6	0x0271      	SUBWF      R0+1, 0
0x04F7	0x00F5      	MOVWF      R4+1
0x04F8	0x0874      	MOVF       R4, 0
0x04F9	0x00D1      	MOVWF      _delay4
0x04FA	0x0875      	MOVF       R4+1, 0
0x04FB	0x00D2      	MOVWF      _delay4+1
;ventilatorv1_2.c,411 :: 		tempti=delay1+delay2+delay3+delay4  ;//calculating total time took for inhale and exhale
0x04FC	0x0858      	MOVF       _delay2, 0
0x04FD	0x0741      	ADDWF      _delay1, 0
0x04FE	0x00F0      	MOVWF      R0
0x04FF	0x0842      	MOVF       _delay1+1, 0
0x0500	0x1803      	BTFSC      STATUS, 0
0x0501	0x3E01      	ADDLW      1
0x0502	0x0759      	ADDWF      _delay2+1, 0
0x0503	0x00F1      	MOVWF      R0+1
0x0504	0x0860      	MOVF       _delay3, 0
0x0505	0x07F0      	ADDWF      R0, 1
0x0506	0x0861      	MOVF       _delay3+1, 0
0x0507	0x1803      	BTFSC      STATUS, 0
0x0508	0x3E01      	ADDLW      1
0x0509	0x07F1      	ADDWF      R0+1, 1
0x050A	0x0874      	MOVF       R4, 0
0x050B	0x0770      	ADDWF      R0, 0
0x050C	0x00F3      	MOVWF      R3
0x050D	0x0871      	MOVF       R0+1, 0
0x050E	0x1803      	BTFSC      STATUS, 0
0x050F	0x3E01      	ADDLW      1
0x0510	0x0775      	ADDWF      R4+1, 0
0x0511	0x00F4      	MOVWF      R3+1
0x0512	0x0873      	MOVF       R3, 0
0x0513	0x1683      	BSF        STATUS, 5
0x0514	0x00A0      	MOVWF      main_tempti_L1
0x0515	0x0874      	MOVF       R3+1, 0
0x0516	0x00A1      	MOVWF      main_tempti_L1+1
;ventilatorv1_2.c,412 :: 		if(tempti>inhtime+exhtime){  //if total time is not within limits error is generated
0x0517	0x1283      	BCF        STATUS, 5
0x0518	0x084F      	MOVF       _exhtime, 0
0x0519	0x075E      	ADDWF      _inhtime, 0
0x051A	0x00F1      	MOVWF      R1
0x051B	0x085F      	MOVF       _inhtime+1, 0
0x051C	0x1803      	BTFSC      STATUS, 0
0x051D	0x3E01      	ADDLW      1
0x051E	0x0750      	ADDWF      _exhtime+1, 0
0x051F	0x00F2      	MOVWF      R1+1
0x0520	0x0874      	MOVF       R3+1, 0
0x0521	0x0272      	SUBWF      R1+1, 0
0x0522	0x1D03      	BTFSS      STATUS, 2
0x0523	0x2D26      	GOTO       L__main135
0x0524	0x0873      	MOVF       R3, 0
0x0525	0x0271      	SUBWF      R1, 0
L__main135:
0x0526	0x1803      	BTFSC      STATUS, 0
0x0527	0x2D2D      	GOTO       L_main78
;ventilatorv1_2.c,413 :: 		selftest(0);
0x0528	0x1683      	BSF        STATUS, 5
0x0529	0x01A2      	CLRF       FARG_selftest_fail
0x052A	0x01A3      	CLRF       FARG_selftest_fail+1
0x052B	0x2309      	CALL       _selftest
;ventilatorv1_2.c,414 :: 		s2v=0;
0x052C	0x1288      	BCF        PORTD, 5
;ventilatorv1_2.c,415 :: 		}
L_main78:
;ventilatorv1_2.c,417 :: 		}
0x052D	0x2D32      	GOTO       L_main79
L_main55:
;ventilatorv1_2.c,419 :: 		dcv1=0;
0x052E	0x1008      	BCF        PORTD, 0
;ventilatorv1_2.c,420 :: 		dcv2=0  ;
0x052F	0x1088      	BCF        PORTD, 1
;ventilatorv1_2.c,421 :: 		s2v=0;
0x0530	0x1288      	BCF        PORTD, 5
;ventilatorv1_2.c,422 :: 		heater=0  ;
0x0531	0x1308      	BCF        PORTD, 6
;ventilatorv1_2.c,424 :: 		}
L_main79:
;ventilatorv1_2.c,426 :: 		}
0x0532	0x2BCB      	GOTO       L_main53
;ventilatorv1_2.c,427 :: 		}
L_end_main:
0x0533	0x2D33      	GOTO       $+0
; end of _main
0x0578	0x3029      	MOVLW      41
0x0579	0x0084      	MOVWF      FSR
0x057A	0x303F      	MOVLW      63
0x057B	0x1283      	BCF        STATUS, 5
0x057C	0x1303      	BCF        STATUS, 6
0x057D	0x00F0      	MOVWF      R0
0x057E	0x3039      	MOVLW      57
0x057F	0x00EE      	MOVWF      ___DoICPAddr
0x0580	0x3005      	MOVLW      5
0x0581	0x00EF      	MOVWF      111
0x0582	0x2336      	CALL       822
0x0583	0x0008      	RETURN
;ventilatorv1_2.c,0 :: ?ICS_led
0x0539	0x3401 ;?ICS_led+0
0x053A	0x3400 ;?ICS_led+1
0x053B	0x3400 ;?ICS_led+2
0x053C	0x3400 ;?ICS_led+3
0x053D	0x3400 ;?ICS_led+4
0x053E	0x3400 ;?ICS_led+5
0x053F	0x3400 ;?ICS_led+6
0x0540	0x3400 ;?ICS_led+7
0x0541	0x3400 ;?ICS_led+8
0x0542	0x3400 ;?ICS_led+9
0x0543	0x3401 ;?ICS_led+10
0x0544	0x3400 ;?ICS_led+11
0x0545	0x3400 ;?ICS_led+12
0x0546	0x3400 ;?ICS_led+13
0x0547	0x3400 ;?ICS_led+14
0x0548	0x3400 ;?ICS_led+15
; end of ?ICS_led
;ventilatorv1_2.c,0 :: ?ICS_count
0x0549	0x3400 ;?ICS_count+0
0x054A	0x3400 ;?ICS_count+1
0x054B	0x3400 ;?ICS_count+2
0x054C	0x3400 ;?ICS_count+3
; end of ?ICS_count
;ventilatorv1_2.c,0 :: ?ICS_p2
0x054D	0x3400 ;?ICS_p2+0
0x054E	0x3400 ;?ICS_p2+1
; end of ?ICS_p2
;ventilatorv1_2.c,0 :: ?ICS_p1
0x054F	0x3400 ;?ICS_p1+0
0x0550	0x3400 ;?ICS_p1+1
; end of ?ICS_p1
;ventilatorv1_2.c,0 :: ?ICS_delay1
0x0551	0x3400 ;?ICS_delay1+0
0x0552	0x3400 ;?ICS_delay1+1
; end of ?ICS_delay1
;ventilatorv1_2.c,0 :: ?ICS_startstatus
0x0553	0x3400 ;?ICS_startstatus+0
0x0554	0x3400 ;?ICS_startstatus+1
; end of ?ICS_startstatus
;ventilatorv1_2.c,0 :: ?ICS_bpmv
0x0555	0x340C ;?ICS_bpmv+0
0x0556	0x3400 ;?ICS_bpmv+1
; end of ?ICS_bpmv
;ventilatorv1_2.c,0 :: ?ICS_p_1
0x0557	0x3400 ;?ICS_p_1+0
0x0558	0x3400 ;?ICS_p_1+1
; end of ?ICS_p_1
;ventilatorv1_2.c,0 :: ?ICS_p_2
0x0559	0x3400 ;?ICS_p_2+0
0x055A	0x3400 ;?ICS_p_2+1
; end of ?ICS_p_2
;ventilatorv1_2.c,0 :: ?ICS_s4
0x055B	0x3400 ;?ICS_s4+0
0x055C	0x3400 ;?ICS_s4+1
; end of ?ICS_s4
;ventilatorv1_2.c,0 :: ?ICS_p3
0x055D	0x3400 ;?ICS_p3+0
0x055E	0x3400 ;?ICS_p3+1
; end of ?ICS_p3
;ventilatorv1_2.c,0 :: ?ICS_exhtime
0x055F	0x34C4 ;?ICS_exhtime+0
0x0560	0x3409 ;?ICS_exhtime+1
; end of ?ICS_exhtime
;ventilatorv1_2.c,0 :: ?ICS_delay4
0x0561	0x3400 ;?ICS_delay4+0
0x0562	0x3400 ;?ICS_delay4+1
; end of ?ICS_delay4
;__Lib_ADC_A_C.c,0 :: ?ICS_vref_mask
0x0563	0x340F ;?ICS_vref_mask+0
; end of ?ICS_vref_mask
;ventilatorv1_2.c,0 :: ?ICS_millis_count
0x0564	0x3400 ;?ICS_millis_count+0
0x0565	0x3400 ;?ICS_millis_count+1
0x0566	0x3400 ;?ICS_millis_count+2
0x0567	0x3400 ;?ICS_millis_count+3
; end of ?ICS_millis_count
;ventilatorv1_2.c,0 :: ?ICS_delay2
0x0568	0x3400 ;?ICS_delay2+0
0x0569	0x3400 ;?ICS_delay2+1
; end of ?ICS_delay2
;ventilatorv1_2.c,0 :: ?ICS_s10
0x056A	0x3400 ;?ICS_s10+0
0x056B	0x3400 ;?ICS_s10+1
; end of ?ICS_s10
;ventilatorv1_2.c,0 :: ?ICS_s9
0x056C	0x3400 ;?ICS_s9+0
0x056D	0x3400 ;?ICS_s9+1
; end of ?ICS_s9
;ventilatorv1_2.c,0 :: ?ICS_inhtime
0x056E	0x34C4 ;?ICS_inhtime+0
0x056F	0x3409 ;?ICS_inhtime+1
; end of ?ICS_inhtime
;ventilatorv1_2.c,0 :: ?ICS_delay3
0x0570	0x3400 ;?ICS_delay3+0
0x0571	0x3400 ;?ICS_delay3+1
; end of ?ICS_delay3
;ventilatorv1_2.c,0 :: ?ICS_temperature
0x0572	0x3401 ;?ICS_temperature+0
0x0573	0x3400 ;?ICS_temperature+1
; end of ?ICS_temperature
;ventilatorv1_2.c,0 :: ?ICS_vol
0x0574	0x34C2 ;?ICS_vol+0
0x0575	0x3401 ;?ICS_vol+1
; end of ?ICS_vol
;ventilatorv1_2.c,0 :: ?ICS_alm_flag
0x0576	0x3400 ;?ICS_alm_flag+0
0x0577	0x3400 ;?ICS_alm_flag+1
; end of ?ICS_alm_flag
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [123]    _Interrupt
0x007F       [8]    _Delay_22us
0x0087      [12]    _Delay_500us
0x0093      [40]    _ADC_Read
0x00BB      [10]    _latch595
0x00C5      [50]    _shiftdata595
0x00F7      [58]    _Button
0x0131       [7]    _____DoICP
0x0138     [465]    _switches
0x0309      [35]    _selftest
0x032C      [10]    _InitTimer0
0x0336      [12]    ___CC2DW
0x0342      [73]    _read_sensor_data
0x038B      [11]    _millis
0x0396      [22]    _ADC_Init
0x03AC     [391]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [0]    TMR0IF_bit
0x000B       [1]    INTCON
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0029      [16]    _led
0x0039       [4]    _count
0x003D       [2]    _p2
0x003F       [2]    _p1
0x0041       [2]    _delay1
0x0043       [2]    _startstatus
0x0045       [2]    _bpmv
0x0047       [2]    _p_1
0x0049       [2]    _p_2
0x004B       [2]    _s4
0x004D       [2]    _p3
0x004F       [2]    _exhtime
0x0051       [2]    _delay4
0x0053       [1]    _vref_mask
0x0054       [4]    _millis_count
0x0058       [2]    _delay2
0x005A       [2]    _s10
0x005C       [2]    _s9
0x005E       [2]    _inhtime
0x0060       [2]    _delay3
0x0062       [2]    _temperature
0x0064       [2]    _vol
0x0066       [2]    _alm_flag
0x0068       [0]    _oldbpmdown
0x0068       [0]    _oldbpmup
0x0068       [0]    _oldvoldown
0x0068       [0]    _oldvolup
0x0069       [3]    _ADC_Get_Sample_Ptr
0x006C       [1]    ___savePCLATH
0x006D       [1]    ___saveSTATUS
0x006E       [2]    ___DoICPAddr
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x0089       [1]    TRISE
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
0x00A0       [2]    main_tempti_L1
0x00A2       [2]    FARG_selftest_fail
0x00A4       [1]    FARG_shiftdata595__shiftdata
0x00A4       [1]    FARG_ADC_Read_channel
0x00A4       [1]    FARG_Button_port
0x00A5       [1]    FARG_Button_pin
0x00A6       [1]    FARG_Button_time_ms
0x00A7       [1]    FARG_Button_active_state
0x00A8       [1]    Button_pMask_L0
0x00A9       [1]    Button_rslt_L0
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0539      [16]    ?ICS_led
0x0549       [4]    ?ICS_count
0x054D       [2]    ?ICS_p2
0x054F       [2]    ?ICS_p1
0x0551       [2]    ?ICS_delay1
0x0553       [2]    ?ICS_startstatus
0x0555       [2]    ?ICS_bpmv
0x0557       [2]    ?ICS_p_1
0x0559       [2]    ?ICS_p_2
0x055B       [2]    ?ICS_s4
0x055D       [2]    ?ICS_p3
0x055F       [2]    ?ICS_exhtime
0x0561       [2]    ?ICS_delay4
0x0563       [1]    ?ICS_vref_mask
0x0564       [4]    ?ICS_millis_count
0x0568       [2]    ?ICS_delay2
0x056A       [2]    ?ICS_s10
0x056C       [2]    ?ICS_s9
0x056E       [2]    ?ICS_inhtime
0x0570       [2]    ?ICS_delay3
0x0572       [2]    ?ICS_temperature
0x0574       [2]    ?ICS_vol
0x0576       [2]    ?ICS_alm_flag
